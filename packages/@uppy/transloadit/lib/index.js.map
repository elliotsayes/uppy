{"version":3,"names":["hasProperty","ErrorWithCause","RateLimitedQueue","BasePlugin","Tus","Assembly","Client","AssemblyOptions","validateParams","AssemblyWatcher","locale","packageJson","defaultGetAssemblyOptions","file","options","params","signature","fields","sendErrorToConsole","originalErr","err","error","cause","console","COMPANION_URL","COMPANION_ALLOWED_HOSTS","TL_COMPANION","Transloadit","constructor","uppy","opts","rawFile","getFile","id","transloadit","assembly","assemblies","getPluginState","client","addFile","catch","log","emit","reason","uploadsAssemblies","assemblyIDs","Object","values","flat","map","assemblyID","getAssembly","Promise","all","setData","pluginData","savedState","previousAssemblies","keys","length","restoreState","files","results","status","entries","uploads","forEach","uploadedFile","state","stepName","result","original_id","localId","push","setPluginState","restoreAssemblies","uploadID","allAssemblyIDs","updateAssemblies","activeAssemblies","update","restored","resolve","then","fileIDs","filesWithoutErrors","filter","mode","message","i18n","createAssembly","importFromUploadURLs","fileID","assemblyOptions","build","maybeCreatedAssemblies","createdAssemblies","Boolean","assembly_id","filteredFileIDs","closeSocketConnections","close","addResultData","incompleteFiles","completedFiles","watcher","assemblyWatchers","promise","submitError","startsWith","endpoint","originalRequest","getUnderlyingObject","responseURL","type","title","defaultLocale","defaultOptions","service","errorReporting","waitForEncoding","waitForMetadata","alwaysRunAssembly","getAssemblyOptions","limit","retryDelays","i18nInit","hasCustomAssemblyOptions","rateLimitedQueue","create","install","addPreProcessor","addPostProcessor","on","use","storeFingerprintForResuming","useFastRemoteRetry","allowedMetaFields","capabilities","getState","setState","individualCancellation","uninstall","removePreProcessor","removePostProcessor","off","getAssemblyFiles","getFiles","list","VERSION","addPluginVersion","pluginName","versionName","plugin","getPlugin","join","meta","assembly_url","filename","name","fieldname","tus","tus_url","addRequestId","remote","test","companionUrl","newHost","companion_url","replace","path","url","newFile","assign","expectedFiles","newAssembly","includes","cancelAssembly","updateNumberOfFilesInAssembly","updatedFiles","fileRemovedHandler","fileRemoved","nbOfRemainingFiles","wrapped","details","reserveFile","i","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","undefined","assemblyId","entry","assembly_ssl_url","getAssemblyStatus","finalStatus","newStatus","ok","connect","version","COMPANION","COMPANION_PATTERN"],"sources":["index.js"],"sourcesContent":["import hasProperty from '@uppy/utils/lib/hasProperty'\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport Tus from '@uppy/tus'\nimport Assembly from './Assembly.js'\nimport Client from './Client.js'\nimport AssemblyOptions, { validateParams } from './AssemblyOptions.js'\nimport AssemblyWatcher from './AssemblyWatcher.js'\n\nimport locale from './locale.js'\nimport packageJson from '../package.json'\n\nfunction defaultGetAssemblyOptions (file, options) {\n  return {\n    params: options.params,\n    signature: options.signature,\n    fields: options.fields,\n  }\n}\n\nconst sendErrorToConsole = originalErr => err => {\n  const error = new ErrorWithCause('Failed to send error to the client', { cause: err })\n  // eslint-disable-next-line no-console\n  console.error(error, originalErr)\n}\n\nconst COMPANION_URL = 'https://api2.transloadit.com/companion'\n// Regex matching acceptable postMessage() origins for authentication feedback from companion.\nconst COMPANION_ALLOWED_HOSTS = /\\.transloadit\\.com$/\n// Regex used to check if a Companion address is run by Transloadit.\nconst TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/\n\n/**\n * Upload files to Transloadit using Tus.\n */\nexport default class Transloadit extends BasePlugin {\n  static VERSION = packageJson.version\n\n  /** @deprecated use `import { COMPANION_URL } from '@uppy/transloadit'` instead. */\n  static COMPANION = COMPANION_URL\n\n  /** @deprecated use `import { COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit'` instead. */\n  static COMPANION_PATTERN = COMPANION_ALLOWED_HOSTS\n\n  #rateLimitedQueue\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Transloadit'\n    this.title = 'Transloadit'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      service: 'https://api2.transloadit.com',\n      errorReporting: true,\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      /** @deprecated use `assemblyOptions` instead */\n      signature: null,\n      /** @deprecated use `assemblyOptions` instead */\n      params: null,\n      /** @deprecated use `assemblyOptions` instead */\n      fields: {},\n      /** @deprecated use `assemblyOptions` instead */\n      getAssemblyOptions: defaultGetAssemblyOptions,\n      limit: 20,\n      retryDelays: [7_000, 10_000, 15_000, 20_000],\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n    // TODO: move this into `defaultOptions` once we remove the deprecated options\n    this.opts.assemblyOptions = opts.assemblyOptions ?? this.opts.getAssemblyOptions\n    this.#rateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    const hasCustomAssemblyOptions = this.opts.assemblyOptions !== defaultOptions.assemblyOptions\n    if (this.opts.params) {\n      validateParams(this.opts.params)\n    } else if (!hasCustomAssemblyOptions) {\n      // Throw the same error that we'd throw if the `params` returned from a\n      // `getAssemblyOptions()` function is null.\n      validateParams(null)\n    }\n\n    this.client = new Client({\n      service: this.opts.service,\n      client: this.#getClientVersion(),\n      errorReporting: this.opts.errorReporting,\n      rateLimitedQueue: this.#rateLimitedQueue,\n    })\n    // Contains Assembly instances for in-progress Assemblies.\n    this.activeAssemblies = {}\n    // Contains a mapping of uploadID to AssemblyWatcher\n    this.assemblyWatchers = {}\n    // Contains a file IDs that have completed postprocessing before the upload\n    // they belong to has entered the postprocess stage.\n    this.completedFiles = Object.create(null)\n  }\n\n  #getClientVersion () {\n    const list = [\n      `uppy-core:${this.uppy.constructor.VERSION}`,\n      `uppy-transloadit:${this.constructor.VERSION}`,\n      `uppy-tus:${Tus.VERSION}`,\n    ]\n\n    const addPluginVersion = (pluginName, versionName) => {\n      const plugin = this.uppy.getPlugin(pluginName)\n      if (plugin) {\n        list.push(`${versionName}:${plugin.constructor.VERSION}`)\n      }\n    }\n\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload')\n      addPluginVersion('AwsS3', 'uppy-aws-s3')\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart')\n    }\n\n    addPluginVersion('Dropbox', 'uppy-dropbox')\n    addPluginVersion('Box', 'uppy-box')\n    addPluginVersion('Facebook', 'uppy-facebook')\n    addPluginVersion('GoogleDrive', 'uppy-google-drive')\n    addPluginVersion('Instagram', 'uppy-instagram')\n    addPluginVersion('OneDrive', 'uppy-onedrive')\n    addPluginVersion('Zoom', 'uppy-zoom')\n    addPluginVersion('Url', 'uppy-url')\n\n    return list.join(',')\n  }\n\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   *\n   * @param {object} file\n   * @param {object} status\n   */\n  #attachAssemblyMetadata (file, status) {\n    // Add the metadata parameters Transloadit needs.\n    const meta = {\n      ...file.meta,\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file',\n    }\n    // Add Assembly-specific Tus endpoint.\n    const tus = {\n      ...file.tus,\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true,\n    }\n\n    // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n    let { remote } = file\n\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      const newHost = status.companion_url\n        .replace(/\\/$/, '')\n      const path = file.remote.url\n        .replace(file.remote.companionUrl, '')\n        .replace(/^\\//, '')\n\n      remote = {\n        ...file.remote,\n        companionUrl: newHost,\n        url: `${newHost}/${path}`,\n      }\n    }\n\n    // Store the Assembly ID this file is in on the file under the `transloadit` key.\n    const newFile = {\n      ...file,\n      transloadit: {\n        assembly: status.assembly_id,\n      },\n    }\n    // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n    if (!this.opts.importFromUploadURLs) {\n      Object.assign(newFile, { meta, tus, remote })\n    }\n    return newFile\n  }\n\n  #createAssembly (fileIDs, uploadID, options) {\n    this.uppy.log('[Transloadit] Create Assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature,\n    }).then(async (newAssembly) => {\n      const files = this.uppy.getFiles().filter(({ id }) => fileIDs.includes(id))\n      if (files.length !== fileIDs.length) {\n        if (files.length === 0) {\n          // All files have been removed, cancelling.\n          await this.client.cancelAssembly(newAssembly)\n          return null\n        }\n        // At least one file has been removed.\n        await this.client.updateNumberOfFilesInAssembly(newAssembly, files.length)\n      }\n\n      const assembly = new Assembly(newAssembly, this.#rateLimitedQueue)\n      const { status } = assembly\n      const assemblyID = status.assembly_id\n\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n      this.setPluginState({\n        // Store the Assembly status.\n        assemblies: {\n          ...assemblies,\n          [assemblyID]: status,\n        },\n        // Store the list of Assemblies related to this upload.\n        uploadsAssemblies: {\n          ...uploadsAssemblies,\n          [uploadID]: [\n            ...uploadsAssemblies[uploadID],\n            assemblyID,\n          ],\n        },\n      })\n\n      const updatedFiles = {}\n      files.forEach((file) => {\n        updatedFiles[file.id] = this.#attachAssemblyMetadata(file, status)\n      })\n\n      this.uppy.setState({\n        files: {\n          ...this.uppy.getState().files,\n          ...updatedFiles,\n        },\n      })\n\n      const fileRemovedHandler = (fileRemoved, reason) => {\n        if (reason === 'cancel-all') {\n          assembly.close()\n          this.uppy.off(fileRemovedHandler)\n        } else if (fileRemoved.id in updatedFiles) {\n          delete updatedFiles[fileRemoved.id]\n          const nbOfRemainingFiles = Object.keys(updatedFiles).length\n          if (nbOfRemainingFiles === 0) {\n            assembly.close()\n            this.#cancelAssembly(newAssembly).catch(() => { /* ignore potential errors */ })\n            this.uppy.off(fileRemovedHandler)\n          } else {\n            this.client.updateNumberOfFilesInAssembly(newAssembly, nbOfRemainingFiles)\n              .catch(() => { /* ignore potential errors */ })\n          }\n        }\n      }\n      this.uppy.on('file-removed', fileRemovedHandler)\n\n      this.uppy.emit('transloadit:assembly-created', status, fileIDs)\n\n      this.uppy.log(`[Transloadit] Created Assembly ${assemblyID}`)\n      return assembly\n    }).catch((err) => {\n      const wrapped = new ErrorWithCause(`${this.i18n('creatingAssemblyFailed')}: ${err.message}`, { cause: err })\n      if ('details' in err) {\n        wrapped.details = err.details\n      }\n      if ('assembly' in err) {\n        wrapped.assembly = err.assembly\n      }\n      throw wrapped\n    })\n  }\n\n  #createAssemblyWatcher (assemblyID, uploadID) {\n  // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    const watcher = new AssemblyWatcher(this.uppy, assemblyID)\n\n    watcher.on('assembly-complete', (id) => {\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n        this.completedFiles[file.id] = true\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    watcher.on('assembly-error', (id, error) => {\n      // Clear postprocessing state for all our files.\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n      // TODO Maybe make a postprocess-error event here?\n        this.uppy.emit('upload-error', file, error)\n\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    this.assemblyWatchers[uploadID] = watcher\n  }\n\n  #shouldWaitAfterUpload () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */\n  #reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      return this.client.reserveFile(assembly.status, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */\n  #onFileUploadURLAvailable = (rawFile) => {\n    const file = this.uppy.getFile(rawFile.id)\n    if (!file?.transloadit?.assembly) {\n      return\n    }\n\n    const { assemblies } = this.getPluginState()\n    const assembly = assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  #findFile (uploadedFile) {\n    const files = this.uppy.getFiles()\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      // Completed file upload.\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file\n      }\n      // In-progress file upload.\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (file.name === uploadedFile.name && file.size === uploadedFile.size) {\n          return file\n        }\n      }\n    }\n    return undefined\n  }\n\n  #onFileUploadComplete (assemblyId, uploadedFile) {\n    const state = this.getPluginState()\n    const file = this.#findFile(uploadedFile)\n    if (!file) {\n      this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process')\n      return\n    }\n    this.setPluginState({\n      files: {\n        ...state.files,\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile,\n        },\n      },\n    })\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  /**\n   * Callback when a new Assembly result comes in.\n   *\n   * @param {string} assemblyId\n   * @param {string} stepName\n   * @param {object} result\n   */\n  #onResult (assemblyId, stepName, result) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null // eslint-disable-line no-param-reassign\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId,\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry],\n    })\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   *\n   * @param {object} status\n   */\n  #onAssemblyFinished (status) {\n    const url = status.assembly_ssl_url\n    this.client.getAssemblyStatus(url).then((finalStatus) => {\n      const assemblyId = finalStatus.assembly_id\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...state.assemblies,\n          [assemblyId]: finalStatus,\n        },\n      })\n      this.uppy.emit('transloadit:complete', finalStatus)\n    })\n  }\n\n  async #cancelAssembly (assembly) {\n    await this.client.cancelAssembly(assembly)\n    // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n    this.uppy.emit('transloadit:assembly-cancelled', assembly)\n  }\n\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */\n  #onCancelAll = async ({ reason } = {}) => {\n    try {\n      if (reason !== 'user') return\n\n      const { uploadsAssemblies } = this.getPluginState()\n      const assemblyIDs = Object.values(uploadsAssemblies).flat(1)\n      const assemblies = assemblyIDs.map((assemblyID) => this.getAssembly(assemblyID))\n\n      await Promise.all(assemblies.map((assembly) => this.#cancelAssembly(assembly)))\n    } catch (err) {\n      this.uppy.log(err)\n    }\n  }\n\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   *\n   * @param {Function} setData\n   */\n  #getPersistentData = (setData) => {\n    const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n    setData({\n      [this.id]: {\n        assemblies,\n        uploadsAssemblies,\n      },\n    })\n  }\n\n  #onRestored = (pluginData) => {\n    const savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {}\n    const previousAssemblies = savedState.assemblies || {}\n    const uploadsAssemblies = savedState.uploadsAssemblies || {}\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return\n    }\n\n    // Convert loaded Assembly statuses to a Transloadit plugin state object.\n    const restoreState = (assemblies) => {\n      const files = {}\n      const results = []\n      for (const [id, status] of Object.entries(assemblies))  {\n        status.uploads.forEach((uploadedFile) => {\n          const file = this.#findFile(uploadedFile)\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: id,\n            uploadedFile,\n          }\n        })\n\n        const state = this.getPluginState()\n        Object.keys(status.results).forEach((stepName) => {\n          for (const result of status.results[stepName]) {\n            const file = state.files[result.original_id]\n            result.localId = file ? file.id : null\n            results.push({\n              id: result.id,\n              result,\n              stepName,\n              assembly: id,\n            })\n          }\n        })\n      }\n\n      this.setPluginState({\n        assemblies,\n        files,\n        results,\n        uploadsAssemblies,\n      })\n    }\n\n    // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n    const restoreAssemblies = () => {\n      // eslint-disable-next-line no-shadow\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n      // Set up the assembly watchers again for all the ongoing uploads.\n      Object.keys(uploadsAssemblies).forEach((uploadID) => {\n        const assemblyIDs = uploadsAssemblies[uploadID]\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n      })\n\n      const allAssemblyIDs = Object.keys(assemblies)\n      allAssemblyIDs.forEach((id) => {\n        const assembly = new Assembly(assemblies[id], this.#rateLimitedQueue)\n        this.#connectAssembly(assembly)\n      })\n    }\n\n    // Force-update all Assemblies to check for missed events.\n    const updateAssemblies = () => {\n      const { assemblies } = this.getPluginState()\n      return Promise.all(\n        Object.keys(assemblies).map((id) => {\n          return this.activeAssemblies[id].update()\n        }),\n      )\n    }\n\n    // Restore all Assembly state.\n    this.restored = Promise.resolve().then(() => {\n      restoreState(previousAssemblies)\n      restoreAssemblies()\n      return updateAssemblies()\n    })\n\n    this.restored.then(() => {\n      this.restored = null\n    })\n  }\n\n  #connectAssembly (assembly) {\n    const { status } = assembly\n    const id = status.assembly_id\n    this.activeAssemblies[id] = assembly\n\n    // Sync local `assemblies` state\n    assembly.on('status', (newStatus) => {\n      const { assemblies } = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...assemblies,\n          [id]: newStatus,\n        },\n      })\n    })\n\n    assembly.on('upload', (file) => {\n      this.#onFileUploadComplete(id, file)\n    })\n    assembly.on('error', (error) => {\n      error.assembly = assembly.status // eslint-disable-line no-param-reassign\n      this.uppy.emit('transloadit:assembly-error', assembly.status, error)\n    })\n\n    assembly.on('executing', () => {\n      this.uppy.emit('transloadit:assembly-executing', assembly.status)\n    })\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', (stepName, result) => {\n        this.#onResult(id, stepName, result)\n      })\n    }\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    }\n\n    // No need to connect to the socket if the Assembly has completed by now.\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly\n    }\n\n    assembly.connect()\n    return assembly\n  }\n\n  #prepareUpload = (fileIDs, uploadID) => {\n    const files = fileIDs.map(id => this.uppy.getFile(id))\n    const filesWithoutErrors = files.filter((file) => {\n      if (!file.error) {\n        this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('creatingAssembly'),\n        })\n        return true\n      }\n      return false\n    })\n\n    // eslint-disable-next-line no-shadow\n    const createAssembly = async ({ fileIDs, options }) => {\n      try {\n        const assembly = await this.#createAssembly(fileIDs, uploadID, options)\n        if (this.opts.importFromUploadURLs) {\n          await this.#reserveFiles(assembly, fileIDs)\n        }\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n        })\n        return assembly\n      } catch (err)  {\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          // Clear preprocessing state when the Assembly could not be created,\n          // otherwise the UI gets confused about the lingering progress keys\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      }\n    }\n\n    const { uploadsAssemblies } = this.getPluginState()\n    this.setPluginState({\n      uploadsAssemblies: {\n        ...uploadsAssemblies,\n        [uploadID]: [],\n      },\n    })\n\n    const assemblyOptions = new AssemblyOptions(filesWithoutErrors, this.opts)\n\n    return assemblyOptions.build()\n      .then((assemblies) => Promise.all(assemblies.map(createAssembly)))\n      .then((maybeCreatedAssemblies) => {\n        const createdAssemblies = maybeCreatedAssemblies.filter(Boolean)\n        const assemblyIDs = createdAssemblies.map(assembly => assembly.status.assembly_id)\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n        return Promise.all(createdAssemblies.map(assembly => this.#connectAssembly(assembly)))\n      })\n      // If something went wrong before any Assemblies could be created,\n      // clear all processing state.\n      .catch((err) => {\n        filesWithoutErrors.forEach((file) => {\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      })\n  }\n\n  #afterUpload = (fileIDs, uploadID) => {\n    const files = fileIDs.map(fileID => this.uppy.getFile(fileID))\n    // Only use files without errors\n    const filteredFileIDs = files.filter((file) => !file.error).map(file => file.id)\n\n    const state = this.getPluginState()\n\n    // If we're still restoring state, wait for that to be done.\n    if (this.restored) {\n      return this.restored.then(() => {\n        return this.#afterUpload(filteredFileIDs, uploadID)\n      })\n    }\n\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    const closeSocketConnections = () => {\n      assemblyIDs.forEach((assemblyID) => {\n        const assembly = this.activeAssemblies[assemblyID]\n        assembly.close()\n        delete this.activeAssemblies[assemblyID]\n      })\n    }\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.#shouldWaitAfterUpload()) {\n      closeSocketConnections()\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n      this.uppy.addResultData(uploadID, { transloadit: assemblies })\n      return Promise.resolve()\n    }\n\n    // If no Assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, { transloadit: [] })\n      return Promise.resolve()\n    }\n\n    const incompleteFiles = files.filter(file => !hasProperty(this.completedFiles, file.id))\n    incompleteFiles.forEach((file) => {\n      this.uppy.emit('postprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('encoding'),\n      })\n    })\n\n    const watcher = this.assemblyWatchers[uploadID]\n    return watcher.promise.then(() => {\n      closeSocketConnections()\n\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n\n      // Remove the Assembly ID list for this upload,\n      // it's no longer going to be used anywhere.\n      const uploadsAssemblies = { ...this.getPluginState().uploadsAssemblies }\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n\n      this.uppy.addResultData(uploadID, {\n        transloadit: assemblies,\n      })\n    })\n  }\n\n  #closeAssemblyIfExists = (assemblyID) => {\n    this.activeAssemblies[assemblyID]?.close()\n  }\n\n  #onError = (err = null, uploadID) => {\n    const state = this.getPluginState()\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n    assemblyIDs?.forEach(this.#closeAssemblyIfExists)\n\n    this.client.submitError(err)\n      // if we can't report the error that sucks\n      .catch(sendErrorToConsole(err))\n  }\n\n  #onTusError = (file, err) => {\n    this.#closeAssemblyIfExists(file?.transloadit?.assembly)\n    if (err?.message?.startsWith('tus: ')) {\n      const endpoint = err.originalRequest?.getUnderlyingObject()?.responseURL\n      this.client.submitError(err, { endpoint, type: 'TUS_ERROR' })\n        // if we can't report the error that sucks\n        .catch(sendErrorToConsole(err))\n    }\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.#prepareUpload)\n    this.uppy.addPostProcessor(this.#afterUpload)\n\n    // We may need to close socket.io connections on error.\n    this.uppy.on('error', this.#onError)\n\n    // Handle cancellation.\n    this.uppy.on('cancel-all', this.#onCancelAll)\n\n    // For error reporting.\n    this.uppy.on('upload-error', this.#onTusError)\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this.#onFileUploadURLAvailable)\n    } else {\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        // Disable Companion's retry optimisation; we need to change the endpoint on retry\n        // so it can't just reuse the same tus.Upload instance server-side.\n        useFastRemoteRetry: false,\n        // Only send Assembly metadata to the tus endpoint.\n        allowedMetaFields: ['assembly_url', 'filename', 'fieldname'],\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit,\n        rateLimitedQueue: this.#rateLimitedQueue,\n        retryDelays: this.opts.retryDelays,\n      })\n    }\n\n    this.uppy.on('restore:get-data', this.#getPersistentData)\n    this.uppy.on('restored', this.#onRestored)\n\n    this.setPluginState({\n      // Contains Assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: [],\n    })\n\n    // We cannot cancel individual files because Assemblies tend to contain many files.\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: false,\n      },\n    })\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#prepareUpload)\n    this.uppy.removePostProcessor(this.#afterUpload)\n    this.uppy.off('error', this.#onError)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.#onFileUploadURLAvailable)\n    }\n\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: true,\n      },\n    })\n  }\n\n  getAssembly (id) {\n    const { assemblies } = this.getPluginState()\n    return assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    return this.uppy.getFiles().filter((file) => {\n      return file?.transloadit?.assembly === assemblyID\n    })\n  }\n}\n\nexport {\n  COMPANION_URL,\n  COMPANION_ALLOWED_HOSTS,\n}\n"],"mappings":"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"}