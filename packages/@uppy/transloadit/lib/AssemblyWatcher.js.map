{"version":3,"names":["Emitter","TransloaditAssemblyWatcher","constructor","uppy","assemblyIDs","assembly","assembly_id","log","emit","error","fileID","length","promise","Promise","resolve","reject","id","indexOf","off","on"],"sources":["AssemblyWatcher.js"],"sourcesContent":["import Emitter from 'component-emitter'\n\n/**\n * Track completion of multiple assemblies.\n *\n * Emits 'assembly-complete' when an assembly completes.\n * Emits 'assembly-error' when an assembly fails.\n * Exposes a `.promise` property that resolves when all assemblies have\n * completed (or failed).\n */\nclass TransloaditAssemblyWatcher extends Emitter {\n  #assemblyIDs\n\n  #reject\n\n  #remaining\n\n  #resolve\n\n  #uppy\n\n  constructor (uppy, assemblyIDs) {\n    super()\n\n    this.#uppy = uppy\n    this.#assemblyIDs = assemblyIDs\n    this.#remaining = assemblyIDs.length\n\n    this.promise = new Promise((resolve, reject) => {\n      this.#resolve = resolve\n      this.#reject = reject\n    })\n\n    this.#addListeners()\n  }\n\n  /**\n   * Are we watching this assembly ID?\n   */\n  #watching (id) {\n    return this.#assemblyIDs.indexOf(id) !== -1\n  }\n\n  #onAssemblyComplete = (assembly) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    this.#uppy.log(`[Transloadit] AssemblyWatcher: Got Assembly finish ${assembly.assembly_id}`)\n\n    this.emit('assembly-complete', assembly.assembly_id)\n\n    this.#checkAllComplete()\n  }\n\n  #onAssemblyCancel = (assembly) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    this.#checkAllComplete()\n  }\n\n  #onAssemblyError = (assembly, error) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    this.#uppy.log(`[Transloadit] AssemblyWatcher: Got Assembly error ${assembly.assembly_id}`)\n    this.#uppy.log(error)\n\n    this.emit('assembly-error', assembly.assembly_id, error)\n\n    this.#checkAllComplete()\n  }\n\n  #onImportError = (assembly, fileID, error) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    // Not sure if we should be doing something when it's just one file failing.\n    // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n    // I think failing the upload is better than silently ignoring.\n    // In the future we should maybe have a way to resolve uploads with some failures,\n    // like returning an object with `{ successful, failed }` uploads.\n    this.#onAssemblyError(assembly, error)\n  }\n\n  #checkAllComplete () {\n    this.#remaining -= 1\n    if (this.#remaining === 0) {\n      // We're done, these listeners can be removed\n      this.#removeListeners()\n      this.#resolve()\n    }\n  }\n\n  #removeListeners () {\n    this.#uppy.off('transloadit:complete', this.#onAssemblyComplete)\n    this.#uppy.off('transloadit:assembly-cancel', this.#onAssemblyCancel)\n    this.#uppy.off('transloadit:assembly-error', this.#onAssemblyError)\n    this.#uppy.off('transloadit:import-error', this.#onImportError)\n  }\n\n  #addListeners () {\n    this.#uppy.on('transloadit:complete', this.#onAssemblyComplete)\n    this.#uppy.on('transloadit:assembly-cancel', this.#onAssemblyCancel)\n    this.#uppy.on('transloadit:assembly-error', this.#onAssemblyError)\n    this.#uppy.on('transloadit:import-error', this.#onImportError)\n  }\n}\n\nexport default TransloaditAssemblyWatcher\n"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,mBAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAMC,0BAAN,SAAyCD,OAAzC,CAAiD;EAW/CE,WAAW,CAAEC,IAAF,EAAQC,WAAR,EAAqB;IAC9B;IAD8B;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA,OAsBTC,QAAD,IAAc;QAClC,IAAI,6BAAC,IAAD,wBAAgBA,QAAQ,CAACC,WAAzB,CAAJ,EAA2C;UACzC;QACD;;QAED,gDAAWC,GAAX,CAAgB,sDAAqDF,QAAQ,CAACC,WAAY,EAA1F;;QAEA,KAAKE,IAAL,CAAU,mBAAV,EAA+BH,QAAQ,CAACC,WAAxC;;QAEA;MACD;IAhC+B;IAAA;MAAA;MAAA,OAkCXD,QAAD,IAAc;QAChC,IAAI,6BAAC,IAAD,wBAAgBA,QAAQ,CAACC,WAAzB,CAAJ,EAA2C;UACzC;QACD;;QAED;MACD;IAxC+B;IAAA;MAAA;MAAA,OA0Cb,CAACD,QAAD,EAAWI,KAAX,KAAqB;QACtC,IAAI,6BAAC,IAAD,wBAAgBJ,QAAQ,CAACC,WAAzB,CAAJ,EAA2C;UACzC;QACD;;QAED,gDAAWC,GAAX,CAAgB,qDAAoDF,QAAQ,CAACC,WAAY,EAAzF;;QACA,gDAAWC,GAAX,CAAeE,KAAf;;QAEA,KAAKD,IAAL,CAAU,gBAAV,EAA4BH,QAAQ,CAACC,WAArC,EAAkDG,KAAlD;;QAEA;MACD;IArD+B;IAAA;MAAA;MAAA,OAuDf,CAACJ,QAAD,EAAWK,MAAX,EAAmBD,KAAnB,KAA6B;QAC5C,IAAI,6BAAC,IAAD,wBAAgBJ,QAAQ,CAACC,WAAzB,CAAJ,EAA2C;UACzC;QACD,CAH2C,CAK5C;QACA;QACA;QACA;QACA;;;QACA,sEAAsBD,QAAtB,EAAgCI,KAAhC;MACD;IAlE+B;IAG9B,kDAAaN,IAAb;IACA,gEAAoBC,WAApB;IACA,4DAAkBA,WAAW,CAACO,MAA9B;IAEA,KAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MAC9C,wDAAgBD,OAAhB;MACA,sDAAeC,MAAf;IACD,CAHc,CAAf;;IAKA;EACD;EAED;AACF;AACA;;;AA5BiD;;oBA6BpCC,E,EAAI;EACb,OAAO,8DAAkBC,OAAlB,CAA0BD,EAA1B,MAAkC,CAAC,CAA1C;AACD;;8BAgDoB;EACnB,6DAAmB,CAAnB;;EACA,IAAI,8DAAoB,CAAxB,EAA2B;IACzB;IACA;;IACA;EACD;AACF;;6BAEmB;EAClB,gDAAWE,GAAX,CAAe,sBAAf,8BAAuC,IAAvC;;EACA,gDAAWA,GAAX,CAAe,6BAAf,8BAA8C,IAA9C;;EACA,gDAAWA,GAAX,CAAe,4BAAf,8BAA6C,IAA7C;;EACA,gDAAWA,GAAX,CAAe,0BAAf,8BAA2C,IAA3C;AACD;;0BAEgB;EACf,gDAAWC,EAAX,CAAc,sBAAd,8BAAsC,IAAtC;;EACA,gDAAWA,EAAX,CAAc,6BAAd,8BAA6C,IAA7C;;EACA,gDAAWA,EAAX,CAAc,4BAAd,8BAA4C,IAA5C;;EACA,gDAAWA,EAAX,CAAc,0BAAd,8BAA0C,IAA1C;AACD;;AAGH,eAAelB,0BAAf"}