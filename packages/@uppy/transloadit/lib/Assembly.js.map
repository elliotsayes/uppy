{"version":3,"names":["Emitter","io","has","NetworkError","fetchWithNetworkError","parseUrl","ASSEMBLY_UPLOADING","ASSEMBLY_EXECUTING","ASSEMBLY_COMPLETED","statusOrder","isStatus","status","test","indexOf","TransloaditAssembly","constructor","assembly","rateLimitedQueue","socket","pollInterval","closed","wrapPromiseFunction","connect","update","diff","updateStatus","next","close","disconnect","clearInterval","emit","parsed","websocket_url","origin","transports","path","pathname","on","id","assembly_id","file","uploads","push","stepName","result","results","err","Object","assign","Error","message","setInterval","connected","isPaused","response","assembly_ssl_url","rateLimit","ok","statusText","json","prev","prevStatus","nextStatus","error","nowExecuting","keys","filter","upload","forEach","nextResults","prevResults","n","some","p","undefined"],"sources":["Assembly.js"],"sourcesContent":["import Emitter from 'component-emitter'\nimport { io } from 'socket.io-client'\nimport has from '@uppy/utils/lib/hasProperty'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError'\nimport parseUrl from './parseUrl.js'\n\nconst ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING'\nconst ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING'\nconst ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED'\n\nconst statusOrder = [\n  ASSEMBLY_UPLOADING,\n  ASSEMBLY_EXECUTING,\n  ASSEMBLY_COMPLETED,\n]\n\n/**\n * Check that an assembly status is equal to or larger than some desired status.\n * It checks for things that are larger so that a comparison like this works,\n * when the old assembly status is UPLOADING but the new is FINISHED:\n *\n * !isStatus(oldStatus, ASSEMBLY_EXECUTING) && isStatus(newState, ASSEMBLY_EXECUTING)\n *\n * …so that we can emit the 'executing' event even if the execution step was so\n * fast that we missed it.\n */\nfunction isStatus (status, test) {\n  return statusOrder.indexOf(status) >= statusOrder.indexOf(test)\n}\n\nclass TransloaditAssembly extends Emitter {\n  #rateLimitedQueue\n\n  #fetchWithNetworkError\n\n  #previousFetchStatusStillPending = false\n\n  constructor (assembly, rateLimitedQueue) {\n    super()\n\n    // The current assembly status.\n    this.status = assembly\n    // The socket.io connection.\n    this.socket = null\n    // The interval timer for full status updates.\n    this.pollInterval = null\n    // Whether this assembly has been closed (finished or errored)\n    this.closed = false\n\n    this.#rateLimitedQueue = rateLimitedQueue\n    this.#fetchWithNetworkError = rateLimitedQueue.wrapPromiseFunction(fetchWithNetworkError)\n  }\n\n  connect () {\n    this.#connectSocket()\n    this.#beginPolling()\n  }\n\n  #onFinished () {\n    this.emit('finished')\n    this.close()\n  }\n\n  #connectSocket () {\n    const parsed = parseUrl(this.status.websocket_url)\n    const socket = io(parsed.origin, {\n      transports: ['websocket'],\n      path: parsed.pathname,\n    })\n\n    socket.on('connect', () => {\n      socket.emit('assembly_connect', {\n        id: this.status.assembly_id,\n      })\n\n      this.emit('connect')\n    })\n\n    socket.on('connect_error', () => {\n      socket.disconnect()\n      this.socket = null\n    })\n\n    socket.on('assembly_finished', () => {\n      this.#onFinished()\n    })\n\n    socket.on('assembly_upload_finished', (file) => {\n      this.emit('upload', file)\n      this.status.uploads.push(file)\n    })\n\n    socket.on('assembly_uploading_finished', () => {\n      this.emit('executing')\n    })\n\n    socket.on('assembly_upload_meta_data_extracted', () => {\n      this.emit('metadata')\n      this.#fetchStatus({ diff: false })\n    })\n\n    socket.on('assembly_result_finished', (stepName, result) => {\n      this.emit('result', stepName, result)\n      if (!this.status.results[stepName]) {\n        this.status.results[stepName] = []\n      }\n      this.status.results[stepName].push(result)\n    })\n\n    socket.on('assembly_error', (err) => {\n      this.#onError(err)\n      // Refetch for updated status code\n      this.#fetchStatus({ diff: false })\n    })\n\n    this.socket = socket\n  }\n\n  #onError (err) {\n    this.emit('error', Object.assign(new Error(err.message), err))\n    this.close()\n  }\n\n  /**\n   * Begin polling for assembly status changes. This sends a request to the\n   * assembly status endpoint every so often, if the socket is not connected.\n   * If the socket connection fails or takes a long time, we won't miss any\n   * events.\n   */\n  #beginPolling () {\n    this.pollInterval = setInterval(() => {\n      if (!this.socket || !this.socket.connected) {\n        this.#fetchStatus()\n      }\n    }, 2000)\n  }\n\n  /**\n   * Reload assembly status. Useful if the socket doesn't work.\n   *\n   * Pass `diff: false` to avoid emitting diff events, instead only emitting\n   * 'status'.\n   */\n  async #fetchStatus ({ diff = true } = {}) {\n    if (this.closed || this.#rateLimitedQueue.isPaused || this.#previousFetchStatusStillPending) return\n\n    try {\n      this.#previousFetchStatusStillPending = true\n      const response = await this.#fetchWithNetworkError(this.status.assembly_ssl_url)\n      this.#previousFetchStatusStillPending = false\n\n      if (this.closed) return\n\n      if (response.status === 429) {\n        this.#rateLimitedQueue.rateLimit(2_000)\n        return\n      }\n\n      if (!response.ok) {\n        this.#onError(new NetworkError(response.statusText))\n        return\n      }\n\n      const status = await response.json()\n      // Avoid updating if we closed during this request's lifetime.\n      if (this.closed) return\n      this.emit('status', status)\n\n      if (diff) {\n        this.updateStatus(status)\n      } else {\n        this.status = status\n      }\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  update () {\n    return this.#fetchStatus({ diff: true })\n  }\n\n  /**\n   * Update this assembly's status with a full new object. Events will be\n   * emitted for status changes, new files, and new results.\n   *\n   * @param {object} next The new assembly status object.\n   */\n  updateStatus (next) {\n    this.#diffStatus(this.status, next)\n    this.status = next\n  }\n\n  /**\n   * Diff two assembly statuses, and emit the events necessary to go from `prev`\n   * to `next`.\n   *\n   * @param {object} prev The previous assembly status.\n   * @param {object} next The new assembly status.\n   */\n  #diffStatus (prev, next) {\n    const prevStatus = prev.ok\n    const nextStatus = next.ok\n\n    if (next.error && !prev.error) {\n      return this.#onError(next)\n    }\n\n    // Desired emit order:\n    //  - executing\n    //  - (n × upload)\n    //  - metadata\n    //  - (m × result)\n    //  - finished\n    // The below checks run in this order, that way even if we jump from\n    // UPLOADING straight to FINISHED all the events are emitted as expected.\n\n    const nowExecuting = isStatus(nextStatus, ASSEMBLY_EXECUTING)\n      && !isStatus(prevStatus, ASSEMBLY_EXECUTING)\n    if (nowExecuting) {\n      // Without WebSockets, this is our only way to tell if uploading finished.\n      // Hence, we emit this just before the 'upload's and before the 'metadata'\n      // event for the most intuitive ordering, corresponding to the _usual_\n      // ordering (if not guaranteed) that you'd get on the WebSocket.\n      this.emit('executing')\n    }\n\n    // Find new uploaded files.\n    Object.keys(next.uploads)\n      .filter((upload) => !has(prev.uploads, upload))\n      .forEach((upload) => {\n        this.emit('upload', next.uploads[upload])\n      })\n\n    if (nowExecuting) {\n      this.emit('metadata')\n    }\n\n    // Find new results.\n    Object.keys(next.results).forEach((stepName) => {\n      const nextResults = next.results[stepName]\n      const prevResults = prev.results[stepName]\n\n      nextResults\n        .filter((n) => !prevResults || !prevResults.some((p) => p.id === n.id))\n        .forEach((result) => {\n          this.emit('result', stepName, result)\n        })\n    })\n\n    if (isStatus(nextStatus, ASSEMBLY_COMPLETED)\n        && !isStatus(prevStatus, ASSEMBLY_COMPLETED)) {\n      this.emit('finished')\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop updating this assembly.\n   */\n  close () {\n    this.closed = true\n    if (this.socket) {\n      this.socket.disconnect()\n      this.socket = null\n    }\n    clearInterval(this.pollInterval)\n    this.pollInterval = null\n  }\n}\n\nexport default TransloaditAssembly\n"],"mappings":"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"}