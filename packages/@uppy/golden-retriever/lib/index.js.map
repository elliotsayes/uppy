{"version":3,"names":["throttle","BasePlugin","ServiceWorkerStore","IndexedDBStore","MetaDataStore","packageJson","GoldenRetriever","constructor","uppy","opts","addBlobToStores","file","isRemote","put","catch","err","log","removeBlobFromStores","delete","id","replaceBlobInStores","handleRestoreConfirmed","currentUploads","getState","resumeAll","Object","keys","forEach","uploadId","restore","setState","recoveredState","abortRestore","fileIDs","files","deleteBlobs","then","length","cancelAll","cleanup","handleComplete","successful","map","restoreBlobs","getFiles","Promise","all","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","resultingArrayOfObjects","blobs","onBlobsLoaded","type","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","leading","trailing","restoreState","savedState","load","savedPluginData","pluginData","getWaitingFiles","waitingFiles","progress","uploadStarted","getUploadingFiles","uploadingFiles","uploadIDs","uploadID","filesInUpload","fileID","getFile","filesToSave","filesToSaveWithoutData","isRestored","data","preview","emit","assign","save","resolve","list","numberOfFilesRecovered","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isGhost","promises","install","on","uninstall","off","VERSION","version"],"sources":["index.js"],"sourcesContent":["import throttle from 'lodash.throttle'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport ServiceWorkerStore from './ServiceWorkerStore.js'\nimport IndexedDBStore from './IndexedDBStore.js'\nimport MetaDataStore from './MetaDataStore.js'\n\nimport packageJson from '../package.json'\n\n/**\n * The GoldenRetriever plugin — restores selected files and resumes uploads\n * after a closed tab or a browser crash!\n *\n * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n * https://uppy.io/blog/2017/07/golden-retriever/\n */\nexport default class GoldenRetriever extends BasePlugin {\n  static VERSION = packageJson.version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'debugger'\n    this.id = this.opts.id || 'GoldenRetriever'\n    this.title = 'Golden Retriever'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID(),\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore({\n      expires: this.opts.expires,\n      ...this.opts.indexedDB || {},\n      storeName: uppy.getID(),\n    })\n\n    this.saveFilesStateToLocalStorage = throttle(\n      this.saveFilesStateToLocalStorage.bind(this),\n      500,\n      { leading: true, trailing: true },\n    )\n    this.restoreState = this.restoreState.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  restoreState () {\n    const savedState = this.MetaDataStore.load()\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {},\n        recoveredState: savedState,\n      })\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    this.uppy.getFiles().forEach((file) => {\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[file.id] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = {\n      ...this.getWaitingFiles(),\n      ...this.getUploadingFiles(),\n    }\n\n    // If all files have been removed by the user, clear recovery state\n    if (Object.keys(filesToSave).length === 0) {\n      if (this.uppy.getState().recoveredState !== null) {\n        this.uppy.setState({ recoveredState: null })\n      }\n      MetaDataStore.cleanup(this.uppy.opts.id)\n      return\n    }\n\n    // We dont’t need to store file.data on local files, because the actual blob will be restored later,\n    // and we want to avoid having weird properties in the serialized object.\n    // Also adding file.isRestored to all files, since they will be restored from local storage\n    const filesToSaveWithoutData = {}\n    Object.keys(filesToSave).forEach((file) => {\n      if (filesToSave[file].isRemote) {\n        filesToSaveWithoutData[file] = {\n          ...filesToSave[file],\n          isRestored: true,\n        }\n      } else {\n        filesToSaveWithoutData[file] = {\n          ...filesToSave[file],\n          isRestored: true,\n          data: null,\n          preview: null,\n        }\n      }\n    })\n\n    const pluginData = {}\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    const { currentUploads } = this.uppy.getState()\n\n    this.MetaDataStore.save({\n      currentUploads,\n      files: filesToSaveWithoutData,\n      pluginData,\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    if (!this.ServiceWorkerStore) {\n      return Promise.resolve({})\n    }\n\n    return this.ServiceWorkerStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    return this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = { ...this.uppy.getState().files }\n\n    // Loop through blobs that we can restore, add blobs to file objects\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true,\n        isGhost: false,\n      }\n      updatedFiles[fileID] = { ...originalFile, ...updatedFileData }\n    })\n\n    // Loop through files that we can’t restore fully — we only have meta, not blobs,\n    // set .isGhost on them, also set isRestored to all files\n    Object.keys(updatedFiles).forEach((fileID) => {\n      if (updatedFiles[fileID].data === null) {\n        updatedFiles[fileID] = {\n          ...updatedFiles[fileID],\n          isGhost: true,\n        }\n      }\n    })\n\n    this.uppy.setState({\n      files: updatedFiles,\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\n        this.uppy.log(err)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    const promises = []\n    fileIDs.forEach((id) => {\n      if (this.ServiceWorkerStore) {\n        promises.push(this.ServiceWorkerStore.delete(id))\n      }\n      if (this.IndexedDBStore) {\n        promises.push(this.IndexedDBStore.delete(id))\n      }\n    })\n    return Promise.all(promises)\n  }\n\n  addBlobToStores = (file) => {\n    if (file.isRemote) return\n\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n\n    this.IndexedDBStore.put(file).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  removeBlobFromStores = (file) => {\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n    this.IndexedDBStore.delete(file.id).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  replaceBlobInStores = (file) => {\n    this.removeBlobFromStores(file)\n    this.addBlobToStores(file)\n  }\n\n  handleRestoreConfirmed = () => {\n    this.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...')\n    // start all uploads again when file blobs are restored\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      this.uppy.resumeAll()\n      Object.keys(currentUploads).forEach((uploadId) => {\n        this.uppy.restore(uploadId, currentUploads[uploadId])\n      })\n    }\n    this.uppy.setState({ recoveredState: null })\n  }\n\n  abortRestore = () => {\n    this.uppy.log('[GoldenRetriever] Aborting restore...')\n\n    const fileIDs = Object.keys(this.uppy.getState().files)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${fileIDs.length} files`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${fileIDs.length} files`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.cancelAll()\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  handleComplete = ({ successful }) => {\n    const fileIDs = successful.map((file) => file.id)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  restoreBlobs = () => {\n    if (this.uppy.getFiles().length > 0) {\n      Promise.all([\n        this.loadFileBlobsFromServiceWorker(),\n        this.loadFileBlobsFromIndexedDB(),\n      ]).then((resultingArrayOfObjects) => {\n        const blobs = { ...resultingArrayOfObjects[0], ...resultingArrayOfObjects[1] }\n        this.onBlobsLoaded(blobs)\n      })\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\n    }\n  }\n\n  install () {\n    this.restoreState()\n    this.restoreBlobs()\n\n    this.uppy.on('file-added', this.addBlobToStores)\n    this.uppy.on('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.on('file-removed', this.removeBlobFromStores)\n    // TODO: the `state-update` is bad practise. It fires on any state change in Uppy\n    // or any state change in any of the plugins. We should to able to only listen\n    // for the state changes we need, somehow.\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.on('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.on('restore-canceled', this.abortRestore)\n    this.uppy.on('complete', this.handleComplete)\n  }\n\n  uninstall () {\n    this.uppy.off('file-added', this.addBlobToStores)\n    this.uppy.off('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.off('file-removed', this.removeBlobFromStores)\n    this.uppy.off('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.off('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.off('restore-canceled', this.abortRestore)\n    this.uppy.off('complete', this.handleComplete)\n  }\n}\n"],"mappings":"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"}