{"version":3,"names":["BasePlugin","tus","Provider","RequestClient","Socket","emitSocketProgress","getSocketHost","settle","EventTracker","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","getFingerprint","packageJson","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","Tus","constructor","uppy","opts","file","Client","remote","providerOptions","provider","client","Object","assign","res","post","url","body","protocol","size","data","meta","token","type","id","title","defaultOptions","useFastRemoteRetry","limit","withCredentials","allowedMetaFields","undefined","Error","requests","rateLimitedQueue","values","uploaders","create","uploaderEvents","uploaderSockets","handleResetProgress","bind","handleUpload","wrapPromiseFunction","priority","files","getState","keys","forEach","fileID","tusState","setState","resetUploaderReferences","uploader","abort","remove","close","upload","Promise","resolve","reject","queuedRequest","qRequest","emit","uploadOptions","fingerprint","onBeforeRequest","req","xhr","getUnderlyingObject","userProvidedPromise","shouldBeRequeued","done","p","run","isPaused","all","err","log","originalRequest","bytesUploaded","bytesTotal","onReceiveUploadUrl","uploadResp","uploadURL","name","defaultOnShouldRetry","status","originalResponse","getStatus","next","rateLimit","value","navigator","onLine","pause","window","addEventListener","resume","once","fn","onShouldRetry","args","copyProp","obj","srcProp","destProp","Array","isArray","item","Upload","start","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","onFileRemove","targetFileID","onPause","onPauseAll","onCancelAll","reason","onResumeAll","error","catch","uploadRemote","progress","uploadStarted","isRestored","serverToken","connectToServerSocket","setFileState","getFile","host","companionUrl","socket","target","send","onRetry","isOpen","onRetryAll","on","progressData","errData","message","cause","currentFile","cb","eventHandler","uploadFiles","promises","map","i","current","total","length","isRemote","fileIDs","filesToUpload","install","capabilities","resumableUploads","addUploader","uninstall","removeUploader","VERSION","version"],"sources":["index.js"],"sourcesContent":["import BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport * as tus from 'tus-js-client'\nimport { Provider, RequestClient, Socket } from '@uppy/companion-client'\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress'\nimport getSocketHost from '@uppy/utils/lib/getSocketHost'\nimport settle from '@uppy/utils/lib/settle'\nimport EventTracker from '@uppy/utils/lib/EventTracker'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport isNetworkError from '@uppy/utils/lib/isNetworkError'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport hasProperty from '@uppy/utils/lib/hasProperty'\nimport getFingerprint from './getFingerprint.js'\n\nimport packageJson from '../package.json'\n\n/** @typedef {import('..').TusOptions} TusOptions */\n/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */\n/** @typedef {import('@uppy/core').Uppy} Uppy */\n/** @typedef {import('@uppy/core').UppyFile} UppyFile */\n/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n *\n * @type {RawTusOptions}\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [100, 1000, 3000, 5000],\n  parallelUploads: 1,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n}\n\n/**\n * Tus resumable file uploader\n */\nexport default class Tus extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #retryDelayIterator\n\n  #queueRequestSocketToken\n\n  /**\n   * @param {Uppy} uppy\n   * @param {TusOptions} opts\n   */\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      useFastRemoteRetry: true,\n      limit: 20,\n      retryDelays: tusDefaultOptions.retryDelays,\n      withCredentials: false,\n    }\n\n    // merge default options with the ones set by user\n    /** @type {import(\"..\").TusOptions} */\n    this.opts = { ...defaultOptions, ...opts }\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.')\n    }\n\n    if ('autoRetry' in opts) {\n      throw new Error('The `autoRetry` option was deprecated and has been removed.')\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#retryDelayIterator = this.opts.retryDelays?.values()\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n\n    this.handleResetProgress = this.handleResetProgress.bind(this)\n    this.handleUpload = this.handleUpload.bind(this)\n    this.#queueRequestSocketToken = this.requests.wrapPromiseFunction(this.#requestSocketToken, { priority: -1 })\n  }\n\n  handleResetProgress () {\n    const files = { ...this.uppy.getState().files }\n    Object.keys(files).forEach((fileID) => {\n      // Only clone the file object if it has a Tus `uploadUrl` attached.\n      if (files[fileID].tus && files[fileID].tus.uploadUrl) {\n        const tusState = { ...files[fileID].tus }\n        delete tusState.uploadUrl\n        files[fileID] = { ...files[fileID], tus: tusState }\n      }\n    })\n\n    this.uppy.setState({ files })\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * @param {string} fileID\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      const uploader = this.uploaders[fileID]\n\n      uploader.abort()\n\n      if (opts.abort) {\n        uploader.abort(true)\n      }\n\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventTracker instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`\n   *   instance is aborted and discarded, the EventTracker instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventTracker instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is\n   *   rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventTracker instances need to be cleaned\n   *    up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using\n   *    `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using\n   *    `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable\n   *    must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking\n   *    up a spot in the queue.\n   *\n   * @param {UppyFile} file for use with upload\n   * @returns {Promise<void>}\n   */\n  upload (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      let queuedRequest\n      let qRequest\n      let upload\n\n      this.uppy.emit('upload-started', file)\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      if (typeof opts.headers === 'function') {\n        opts.headers = opts.headers(file)\n      }\n\n      /** @type {RawTusOptions} */\n      const uploadOptions = {\n        ...tusDefaultOptions,\n        ...opts,\n      }\n\n      // We override tus fingerprint to uppy’s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        let userProvidedPromise\n        if (typeof opts.onBeforeRequest === 'function') {\n          userProvidedPromise = opts.onBeforeRequest(req, file)\n        }\n\n        if (hasProperty(queuedRequest, 'shouldBeRequeued')) {\n          if (!queuedRequest.shouldBeRequeued) return Promise.reject()\n          let done\n          const p = new Promise((res) => { // eslint-disable-line promise/param-names\n            done = res\n          })\n          queuedRequest = this.requests.run(() => {\n            if (file.isPaused) {\n              queuedRequest.abort()\n            }\n            done()\n            return () => {}\n          })\n          // If the request has been requeued because it was rate limited by the\n          // remote server, we want to wait for `RateLimitedQueue` to dispatch\n          // the re-try request.\n          // Therefore we create a promise that the queue will resolve when\n          // enough time has elapsed to expect not to be rate-limited again.\n          // This means we can hold the Tus retry here with a `Promise.all`,\n          // together with the returned value of the user provided\n          // `onBeforeRequest` option callback (in case it returns a promise).\n          return Promise.all([p, userProvidedPromise])\n        }\n        return userProvidedPromise\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null\n        if (isNetworkError(xhr)) {\n          // eslint-disable-next-line no-param-reassign\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest?.abort()\n\n        this.uppy.emit('upload-error', file, err)\n\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = () => {\n        const uploadResp = {\n          uploadURL: upload.url,\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-success', file, uploadResp)\n\n        if (upload.url) {\n          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`)\n        }\n\n        resolve(upload)\n      }\n\n      const defaultOnShouldRetry = (err) => {\n        const status = err?.originalResponse?.getStatus()\n\n        if (status === 429) {\n          // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n          if (!this.requests.isPaused) {\n            const next = this.#retryDelayIterator?.next()\n            if (next == null || next.done) {\n              return false\n            }\n            this.requests.rateLimit(next.value)\n          }\n        } else if (status > 400 && status < 500 && status !== 409) {\n          // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n          return false\n        } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n          // The navigator is offline, let's wait for it to come back online.\n          if (!this.requests.isPaused) {\n            this.requests.pause()\n            window.addEventListener('online', () => {\n              this.requests.resume()\n            }, { once: true })\n          }\n        }\n        queuedRequest.abort()\n        queuedRequest = {\n          shouldBeRequeued: true,\n          abort () {\n            this.shouldBeRequeued = false\n          },\n          done () {\n            throw new Error('Cannot mark a queued request as done: this indicates a bug')\n          },\n          fn () {\n            throw new Error('Cannot run a queued request: this indicates a bug')\n          },\n        }\n        return true\n      }\n\n      if (opts.onShouldRetry != null) {\n        uploadOptions.onShouldRetry = (...args) => opts.onShouldRetry(...args, defaultOnShouldRetry)\n      } else {\n        uploadOptions.onShouldRetry = defaultOnShouldRetry\n      }\n\n      const copyProp = (obj, srcProp, destProp) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          // eslint-disable-next-line no-param-reassign\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      /** @type {Record<string, string>} */\n      const meta = {}\n      const allowedMetaFields = Array.isArray(opts.allowedMetaFields)\n        ? opts.allowedMetaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n      allowedMetaFields.forEach((item) => {\n        meta[item] = file.meta[item]\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      // eslint-disable-next-line prefer-const\n      qRequest = () => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      }\n\n      upload.findPreviousUploads().then((previousUploads) => {\n        const previousUpload = previousUploads[0]\n        if (previousUpload) {\n          this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`)\n          upload.resumeFromPreviousUpload(previousUpload)\n        }\n      })\n\n      queuedRequest = this.requests.run(qRequest)\n\n      this.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        queuedRequest.abort()\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest = this.requests.run(qRequest)\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          queuedRequest.abort()\n          this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(qRequest)\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  #requestSocketToken = async (file) => {\n    const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n    const client = new Client(this.uppy, file.remote.providerOptions)\n    const opts = { ...this.opts }\n\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    const res = await client.post(file.remote.url, {\n      ...file.remote.body,\n      endpoint: opts.endpoint,\n      uploadUrl: opts.uploadUrl,\n      protocol: 'tus',\n      size: file.data.size,\n      headers: opts.headers,\n      metadata: file.meta,\n    })\n    return res.token\n  }\n\n  /**\n   * @param {UppyFile} file for use with upload\n   * @returns {Promise<void>}\n   */\n  async uploadRemote (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n    if (!file.progress.uploadStarted || !file.isRestored) {\n      this.uppy.emit('upload-started', file)\n    }\n\n    try {\n      if (file.serverToken) {\n        return this.connectToServerSocket(file)\n      }\n      const serverToken = await this.#queueRequestSocketToken(file)\n\n      if (!this.uppy.getState().files[file.id]) return undefined\n\n      this.uppy.setFileState(file.id, { serverToken })\n      return this.connectToServerSocket(this.uppy.getFile(file.id))\n    } catch (err) {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    }\n  }\n\n  /**\n   * See the comment on the upload() method.\n   *\n   * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is\n   * handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().\n   *\n   * @param {UppyFile} file\n   */\n  connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}` })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      let queuedRequest\n\n      this.onFileRemove(file.id, () => {\n        queuedRequest.abort()\n        socket.send('cancel', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          socket.send('pause', {})\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.send('resume', {})\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          queuedRequest.abort()\n          socket.send('cancel', {})\n          this.resetUploaderReferences(file.id)\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.send('resume', {})\n          return () => {}\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        // See the comment in the onRetry() call\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        const { message } = errData.error\n        const error = Object.assign(new Error(message), { cause: errData.error })\n\n        // If the remote retry optimisation should not be used,\n        // close the socket—this will tell companion to clear state and delete the file.\n        if (!this.opts.useFastRemoteRetry) {\n          this.resetUploaderReferences(file.id)\n          // Remove the serverToken so that a new one will be created for the retry.\n          this.uppy.setFileState(file.id, {\n            serverToken: null,\n          })\n        } else {\n          socket.close()\n        }\n\n        this.uppy.emit('upload-error', file, error)\n        queuedRequest.done()\n        reject(error)\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        resolve()\n      })\n\n      queuedRequest = this.requests.run(() => {\n        if (file.isPaused) {\n          socket.send('pause', {})\n        }\n\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      })\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   *\n   * @param {UppyFile} file\n   * @param {string} uploadURL\n   */\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(string): void} cb\n   */\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(boolean): void} cb\n   */\n  onPause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        // const isPaused = this.uppy.pauseResume(fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} eventHandler\n   */\n  onCancelAll (fileID, eventHandler) {\n    this.uploaderEvents[fileID].on('cancel-all', (...args) => {\n      if (!this.uppy.getFile(fileID)) return\n      eventHandler(...args)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {(UppyFile | FailedUppyFile)[]} files\n   */\n  uploadFiles (files) {\n    const promises = files.map((file, i) => {\n      const current = i + 1\n      const total = files.length\n\n      if ('error' in file && file.error) {\n        return Promise.reject(new Error(file.error))\n      } if (file.isRemote) {\n        // We emit upload-started here, so that it's also emitted for files\n        // that have to wait due to the `limit` option.\n        // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n        if (!file.progress.uploadStarted || !file.isRestored) {\n          this.uppy.emit('upload-started', file)\n        }\n        return this.uploadRemote(file, current, total)\n      }\n      // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n      if (!file.progress.uploadStarted || !file.isRestored) {\n        this.uppy.emit('upload-started', file)\n      }\n      return this.upload(file, current, total)\n    })\n\n    return settle(promises)\n  }\n\n  /**\n   * @param {string[]} fileIDs\n   */\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return Promise.resolve()\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = fileIDs.map((fileID) => this.uppy.getFile(fileID))\n\n    return this.uploadFiles(filesToUpload)\n      .then(() => null)\n  }\n\n  install () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: true },\n    })\n    this.uppy.addUploader(this.handleUpload)\n\n    this.uppy.on('reset-progress', this.handleResetProgress)\n  }\n\n  uninstall () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: false },\n    })\n    this.uppy.removeUploader(this.handleUpload)\n  }\n}\n"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,8BAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,eAArB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,MAAlC,QAAgD,wBAAhD;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;MAEOC,W;;;AAEP;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG;EACxBC,QAAQ,EAAE,EADc;EAGxBC,SAAS,EAAE,IAHa;EAIxBC,QAAQ,EAAE,EAJc;EAKxBC,UAAU,EAAE,IALY;EAOxBC,UAAU,EAAE,IAPY;EAQxBC,eAAe,EAAE,IARO;EASxBC,SAAS,EAAE,IATa;EAUxBC,OAAO,EAAE,IAVe;EAYxBC,mBAAmB,EAAE,KAZG;EAaxBC,OAAO,EAAE,EAbe;EAcxBC,YAAY,EAAE,KAdU;EAgBxBC,SAAS,EAAEC,QAhBa;EAiBxBC,WAAW,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,CAjBW;EAkBxBC,eAAe,EAAE,CAlBO;EAmBxBC,0BAA0B,EAAE,KAnBJ;EAoBxBC,oBAAoB,EAAE,KApBE;EAqBxBC,wBAAwB,EAAE;AArBF,CAA1B;AAwBA;AACA;AACA;;;;;;;;AACA,eAAe,MAAMC,GAAN,SAAkBlC,UAAlB,CAA6B;EAO1C;AACF;AACA;AACA;EACEmC,WAAW,CAAEC,IAAF,EAAQC,KAAR,EAAc;IAAA;;IACvB,MAAMD,IAAN,EAAYC,KAAZ;IADuB;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA,OAmXH,MAAOC,IAAP,IAAgB;QACpC,MAAMC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYC,eAAZ,CAA4BC,QAA5B,GAAuCxC,QAAvC,GAAkDC,aAAjE;QACA,MAAMwC,MAAM,GAAG,IAAIJ,MAAJ,CAAW,KAAKH,IAAhB,EAAsBE,IAAI,CAACE,MAAL,CAAYC,eAAlC,CAAf;QACA,MAAMJ,IAAI,GAAG,EAAE,GAAG,KAAKA;QAAV,CAAb;;QAEA,IAAIC,IAAI,CAACrC,GAAT,EAAc;UACZ;UACA2C,MAAM,CAACC,MAAP,CAAcR,IAAd,EAAoBC,IAAI,CAACrC,GAAzB;QACD;;QAED,MAAM6C,GAAG,GAAG,MAAMH,MAAM,CAACI,IAAP,CAAYT,IAAI,CAACE,MAAL,CAAYQ,GAAxB,EAA6B,EAC7C,GAAGV,IAAI,CAACE,MAAL,CAAYS,IAD8B;UAE7CjC,QAAQ,EAAEqB,IAAI,CAACrB,QAF8B;UAG7CC,SAAS,EAAEoB,IAAI,CAACpB,SAH6B;UAI7CiC,QAAQ,EAAE,KAJmC;UAK7CC,IAAI,EAAEb,IAAI,CAACc,IAAL,CAAUD,IAL6B;UAM7C1B,OAAO,EAAEY,IAAI,CAACZ,OAN+B;UAO7CP,QAAQ,EAAEoB,IAAI,CAACe;QAP8B,CAA7B,CAAlB;QASA,OAAOP,GAAG,CAACQ,KAAX;MACD;IAvYwB;IAEvB,KAAKC,IAAL,GAAY,UAAZ;IACA,KAAKC,EAAL,GAAU,KAAKnB,IAAL,CAAUmB,EAAV,IAAgB,KAA1B;IACA,KAAKC,KAAL,GAAa,KAAb,CAJuB,CAMvB;;IACA,MAAMC,cAAc,GAAG;MACrBC,kBAAkB,EAAE,IADC;MAErBC,KAAK,EAAE,EAFc;MAGrB/B,WAAW,EAAEd,iBAAiB,CAACc,WAHV;MAIrBgC,eAAe,EAAE;IAJI,CAAvB,CAPuB,CAcvB;;IACA;;IACA,KAAKxB,IAAL,GAAY,EAAE,GAAGqB,cAAL;MAAqB,GAAGrB;IAAxB,CAAZ;;IAEA,IAAI,CAAAA,KAAI,QAAJ,YAAAA,KAAI,CAAEyB,iBAAN,MAA4BC,SAA5B,IAAyC,gBAAgB,KAAK1B,IAAlE,EAAwE;MACtE,MAAM,IAAI2B,KAAJ,CAAU,kEAAV,CAAN;IACD;;IAED,IAAI,eAAe3B,KAAnB,EAAyB;MACvB,MAAM,IAAI2B,KAAJ,CAAU,6DAAV,CAAN;IACD;IAED;AACJ;AACA;AACA;AACA;;;IACI,KAAKC,QAAL,4BAAgB,KAAK5B,IAAL,CAAU6B,gBAA1B,oCAA8C,IAAIvD,gBAAJ,CAAqB,KAAK0B,IAAL,CAAUuB,KAA/B,CAA9C;IACA,uGAA2B,KAAKvB,IAAL,CAAUR,WAArC,qBAA2B,sBAAuBsC,MAAvB,EAA3B;IAEA,KAAKC,SAAL,GAAiBxB,MAAM,CAACyB,MAAP,CAAc,IAAd,CAAjB;IACA,KAAKC,cAAL,GAAsB1B,MAAM,CAACyB,MAAP,CAAc,IAAd,CAAtB;IACA,KAAKE,eAAL,GAAuB3B,MAAM,CAACyB,MAAP,CAAc,IAAd,CAAvB;IAEA,KAAKG,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;IACA,KAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;IACA,wFAAgC,KAAKR,QAAL,CAAcU,mBAAd,6BAAkC,IAAlC,6CAA4D;MAAEC,QAAQ,EAAE,CAAC;IAAb,CAA5D,CAAhC;EACD;;EAEDJ,mBAAmB,GAAI;IACrB,MAAMK,KAAK,GAAG,EAAE,GAAG,KAAKzC,IAAL,CAAU0C,QAAV,GAAqBD;IAA1B,CAAd;IACAjC,MAAM,CAACmC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA4BC,MAAD,IAAY;MACrC;MACA,IAAIJ,KAAK,CAACI,MAAD,CAAL,CAAchF,GAAd,IAAqB4E,KAAK,CAACI,MAAD,CAAL,CAAchF,GAAd,CAAkBgB,SAA3C,EAAsD;QACpD,MAAMiE,QAAQ,GAAG,EAAE,GAAGL,KAAK,CAACI,MAAD,CAAL,CAAchF;QAAnB,CAAjB;QACA,OAAOiF,QAAQ,CAACjE,SAAhB;QACA4D,KAAK,CAACI,MAAD,CAAL,GAAgB,EAAE,GAAGJ,KAAK,CAACI,MAAD,CAAV;UAAoBhF,GAAG,EAAEiF;QAAzB,CAAhB;MACD;IACF,CAPD;IASA,KAAK9C,IAAL,CAAU+C,QAAV,CAAmB;MAAEN;IAAF,CAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEO,uBAAuB,CAAEH,MAAF,EAAU5C,IAAV,EAAqB;IAAA,IAAXA,IAAW;MAAXA,IAAW,GAAJ,EAAI;IAAA;;IAC1C,IAAI,KAAK+B,SAAL,CAAea,MAAf,CAAJ,EAA4B;MAC1B,MAAMI,QAAQ,GAAG,KAAKjB,SAAL,CAAea,MAAf,CAAjB;MAEAI,QAAQ,CAACC,KAAT;;MAEA,IAAIjD,IAAI,CAACiD,KAAT,EAAgB;QACdD,QAAQ,CAACC,KAAT,CAAe,IAAf;MACD;;MAED,KAAKlB,SAAL,CAAea,MAAf,IAAyB,IAAzB;IACD;;IACD,IAAI,KAAKX,cAAL,CAAoBW,MAApB,CAAJ,EAAiC;MAC/B,KAAKX,cAAL,CAAoBW,MAApB,EAA4BM,MAA5B;MACA,KAAKjB,cAAL,CAAoBW,MAApB,IAA8B,IAA9B;IACD;;IACD,IAAI,KAAKV,eAAL,CAAqBU,MAArB,CAAJ,EAAkC;MAChC,KAAKV,eAAL,CAAqBU,MAArB,EAA6BO,KAA7B;MACA,KAAKjB,eAAL,CAAqBU,MAArB,IAA+B,IAA/B;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEQ,MAAM,CAAEnD,IAAF,EAAQ;IAAA;;IACZ,KAAK8C,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC,EADY,CAGZ;;IACA,OAAO,IAAIkC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtC,IAAIC,aAAJ;MACA,IAAIC,QAAJ;MACA,IAAIL,MAAJ;MAEA,KAAKrD,IAAL,CAAU2D,IAAV,CAAe,gBAAf,EAAiCzD,IAAjC;MAEA,MAAMD,IAAI,GAAG,EACX,GAAG,KAAKA,IADG;QAEX,IAAIC,IAAI,CAACrC,GAAL,IAAY,EAAhB;MAFW,CAAb;;MAKA,IAAI,OAAOoC,IAAI,CAACZ,OAAZ,KAAwB,UAA5B,EAAwC;QACtCY,IAAI,CAACZ,OAAL,GAAeY,IAAI,CAACZ,OAAL,CAAaa,IAAb,CAAf;MACD;MAED;;;MACA,MAAM0D,aAAa,GAAG,EACpB,GAAGjF,iBADiB;QAEpB,GAAGsB;MAFiB,CAAtB,CAjBsC,CAsBtC;MACA;MACA;MACA;;MACA2D,aAAa,CAACC,WAAd,GAA4BpF,cAAc,CAACyB,IAAD,CAA1C;;MAEA0D,aAAa,CAACE,eAAd,GAAiCC,GAAD,IAAS;QACvC,MAAMC,GAAG,GAAGD,GAAG,CAACE,mBAAJ,EAAZ;QACAD,GAAG,CAACvC,eAAJ,GAAsB,CAAC,CAACxB,IAAI,CAACwB,eAA7B;QAEA,IAAIyC,mBAAJ;;QACA,IAAI,OAAOjE,IAAI,CAAC6D,eAAZ,KAAgC,UAApC,EAAgD;UAC9CI,mBAAmB,GAAGjE,IAAI,CAAC6D,eAAL,CAAqBC,GAArB,EAA0B7D,IAA1B,CAAtB;QACD;;QAED,IAAI1B,WAAW,CAACiF,aAAD,EAAgB,kBAAhB,CAAf,EAAoD;UAClD,IAAI,CAACA,aAAa,CAACU,gBAAnB,EAAqC,OAAOb,OAAO,CAACE,MAAR,EAAP;UACrC,IAAIY,IAAJ;UACA,MAAMC,CAAC,GAAG,IAAIf,OAAJ,CAAa5C,GAAD,IAAS;YAAE;YAC/B0D,IAAI,GAAG1D,GAAP;UACD,CAFS,CAAV;UAGA+C,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkB,MAAM;YACtC,IAAIpE,IAAI,CAACqE,QAAT,EAAmB;cACjBd,aAAa,CAACP,KAAd;YACD;;YACDkB,IAAI;YACJ,OAAO,MAAM,CAAE,CAAf;UACD,CANe,CAAhB,CANkD,CAalD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UACA,OAAOd,OAAO,CAACkB,GAAR,CAAY,CAACH,CAAD,EAAIH,mBAAJ,CAAZ,CAAP;QACD;;QACD,OAAOA,mBAAP;MACD,CAjCD;;MAmCAN,aAAa,CAACzE,OAAd,GAAyBsF,GAAD,IAAS;QAAA;;QAC/B,KAAKzE,IAAL,CAAU0E,GAAV,CAAcD,GAAd;QAEA,MAAMT,GAAG,GAAGS,GAAG,CAACE,eAAJ,GAAsBF,GAAG,CAACE,eAAJ,CAAoBV,mBAApB,EAAtB,GAAkE,IAA9E;;QACA,IAAI3F,cAAc,CAAC0F,GAAD,CAAlB,EAAyB;UACvB;UACAS,GAAG,GAAG,IAAIpG,YAAJ,CAAiBoG,GAAjB,EAAsBT,GAAtB,CAAN;QACD;;QAED,KAAKhB,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC;QACA,kBAAAqC,aAAa,SAAb,2BAAeP,KAAf;QAEA,KAAKlD,IAAL,CAAU2D,IAAV,CAAe,cAAf,EAA+BzD,IAA/B,EAAqCuE,GAArC;QAEAjB,MAAM,CAACiB,GAAD,CAAN;MACD,CAfD;;MAiBAb,aAAa,CAAC5E,UAAd,GAA2B,CAAC4F,aAAD,EAAgBC,UAAhB,KAA+B;QACxD,KAAKC,kBAAL,CAAwB5E,IAAxB,EAA8BmD,MAAM,CAACzC,GAArC;QACA,KAAKZ,IAAL,CAAU2D,IAAV,CAAe,iBAAf,EAAkCzD,IAAlC,EAAwC;UACtC+C,QAAQ,EAAE,IAD4B;UAEtC2B,aAFsC;UAGtCC;QAHsC,CAAxC;MAKD,CAPD;;MASAjB,aAAa,CAAC1E,SAAd,GAA0B,MAAM;QAC9B,MAAM6F,UAAU,GAAG;UACjBC,SAAS,EAAE3B,MAAM,CAACzC;QADD,CAAnB;QAIA,KAAKoC,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC;QACAqC,aAAa,CAACW,IAAd;QAEA,KAAKpE,IAAL,CAAU2D,IAAV,CAAe,gBAAf,EAAiCzD,IAAjC,EAAuC6E,UAAvC;;QAEA,IAAI1B,MAAM,CAACzC,GAAX,EAAgB;UACd,KAAKZ,IAAL,CAAU0E,GAAV,CAAe,YAAWrB,MAAM,CAACnD,IAAP,CAAY+E,IAAK,SAAQ5B,MAAM,CAACzC,GAAI,EAA9D;QACD;;QAED2C,OAAO,CAACF,MAAD,CAAP;MACD,CAfD;;MAiBA,MAAM6B,oBAAoB,GAAIT,GAAD,IAAS;QAAA;;QACpC,MAAMU,MAAM,GAAGV,GAAH,6CAAGA,GAAG,CAAEW,gBAAR,qBAAG,sBAAuBC,SAAvB,EAAf;;QAEA,IAAIF,MAAM,KAAK,GAAf,EAAoB;UAClB;UACA,IAAI,CAAC,KAAKtD,QAAL,CAAc0C,QAAnB,EAA6B;YAAA;;YAC3B,MAAMe,IAAI,wDAAG,IAAH,gEAAG,sBAA0BA,IAA1B,EAAb;;YACA,IAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAClB,IAAzB,EAA+B;cAC7B,OAAO,KAAP;YACD;;YACD,KAAKvC,QAAL,CAAc0D,SAAd,CAAwBD,IAAI,CAACE,KAA7B;UACD;QACF,CATD,MASO,IAAIL,MAAM,GAAG,GAAT,IAAgBA,MAAM,GAAG,GAAzB,IAAgCA,MAAM,KAAK,GAA/C,EAAoD;UACzD;UACA,OAAO,KAAP;QACD,CAHM,MAGA,IAAI,OAAOM,SAAP,KAAqB,WAArB,IAAoCA,SAAS,CAACC,MAAV,KAAqB,KAA7D,EAAoE;UACzE;UACA,IAAI,CAAC,KAAK7D,QAAL,CAAc0C,QAAnB,EAA6B;YAC3B,KAAK1C,QAAL,CAAc8D,KAAd;YACAC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;cACtC,KAAKhE,QAAL,CAAciE,MAAd;YACD,CAFD,EAEG;cAAEC,IAAI,EAAE;YAAR,CAFH;UAGD;QACF;;QACDtC,aAAa,CAACP,KAAd;QACAO,aAAa,GAAG;UACdU,gBAAgB,EAAE,IADJ;;UAEdjB,KAAK,GAAI;YACP,KAAKiB,gBAAL,GAAwB,KAAxB;UACD,CAJa;;UAKdC,IAAI,GAAI;YACN,MAAM,IAAIxC,KAAJ,CAAU,4DAAV,CAAN;UACD,CAPa;;UAQdoE,EAAE,GAAI;YACJ,MAAM,IAAIpE,KAAJ,CAAU,mDAAV,CAAN;UACD;;QAVa,CAAhB;QAYA,OAAO,IAAP;MACD,CAtCD;;MAwCA,IAAI3B,IAAI,CAACgG,aAAL,IAAsB,IAA1B,EAAgC;QAC9BrC,aAAa,CAACqC,aAAd,GAA8B;UAAA,kCAAIC,IAAJ;YAAIA,IAAJ;UAAA;;UAAA,OAAajG,IAAI,CAACgG,aAAL,CAAmB,GAAGC,IAAtB,EAA4BhB,oBAA5B,CAAb;QAAA,CAA9B;MACD,CAFD,MAEO;QACLtB,aAAa,CAACqC,aAAd,GAA8Bf,oBAA9B;MACD;;MAED,MAAMiB,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAeC,QAAf,KAA4B;QAC3C,IAAI9H,WAAW,CAAC4H,GAAD,EAAMC,OAAN,CAAX,IAA6B,CAAC7H,WAAW,CAAC4H,GAAD,EAAME,QAAN,CAA7C,EAA8D;UAC5D;UACAF,GAAG,CAACE,QAAD,CAAH,GAAgBF,GAAG,CAACC,OAAD,CAAnB;QACD;MACF,CALD;MAOA;;;MACA,MAAMpF,IAAI,GAAG,EAAb;MACA,MAAMS,iBAAiB,GAAG6E,KAAK,CAACC,OAAN,CAAcvG,IAAI,CAACyB,iBAAnB,IACtBzB,IAAI,CAACyB,iBADiB,CAExB;MAFwB,EAGtBlB,MAAM,CAACmC,IAAP,CAAYzC,IAAI,CAACe,IAAjB,CAHJ;MAIAS,iBAAiB,CAACkB,OAAlB,CAA2B6D,IAAD,IAAU;QAClCxF,IAAI,CAACwF,IAAD,CAAJ,GAAavG,IAAI,CAACe,IAAL,CAAUwF,IAAV,CAAb;MACD,CAFD,EArKsC,CAyKtC;;MACAN,QAAQ,CAAClF,IAAD,EAAO,MAAP,EAAe,UAAf,CAAR;MACAkF,QAAQ,CAAClF,IAAD,EAAO,MAAP,EAAe,UAAf,CAAR;MAEA2C,aAAa,CAAC9E,QAAd,GAAyBmC,IAAzB;MAEAoC,MAAM,GAAG,IAAIxF,GAAG,CAAC6I,MAAR,CAAexG,IAAI,CAACc,IAApB,EAA0B4C,aAA1B,CAAT;MACA,KAAK5B,SAAL,CAAe9B,IAAI,CAACkB,EAApB,IAA0BiC,MAA1B;MACA,KAAKnB,cAAL,CAAoBhC,IAAI,CAACkB,EAAzB,IAA+B,IAAIhD,YAAJ,CAAiB,KAAK4B,IAAtB,CAA/B,CAjLsC,CAmLtC;;MACA0D,QAAQ,GAAG,MAAM;QACf,IAAI,CAACxD,IAAI,CAACqE,QAAV,EAAoB;UAClBlB,MAAM,CAACsD,KAAP;QACD,CAHc,CAIf;QACA;QACA;QACA;QACA;QACA;;;QACA,OAAO,MAAM,CAAE,CAAf;MACD,CAXD;;MAaAtD,MAAM,CAACuD,mBAAP,GAA6BC,IAA7B,CAAmCC,eAAD,IAAqB;QACrD,MAAMC,cAAc,GAAGD,eAAe,CAAC,CAAD,CAAtC;;QACA,IAAIC,cAAJ,EAAoB;UAClB,KAAK/G,IAAL,CAAU0E,GAAV,CAAe,4BAA2BxE,IAAI,CAACkB,EAAG,eAAc2F,cAAc,CAACC,YAAa,EAA5F;UACA3D,MAAM,CAAC4D,wBAAP,CAAgCF,cAAhC;QACD;MACF,CAND;MAQAtD,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkBZ,QAAlB,CAAhB;MAEA,KAAKwD,YAAL,CAAkBhH,IAAI,CAACkB,EAAvB,EAA4B+F,YAAD,IAAkB;QAC3C1D,aAAa,CAACP,KAAd;QACA,KAAKF,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC,EAAsC;UAAE8B,KAAK,EAAE,CAAC,CAACG,MAAM,CAACzC;QAAlB,CAAtC;QACA2C,OAAO,CAAE,UAAS4D,YAAa,cAAxB,CAAP;MACD,CAJD;MAMA,KAAKC,OAAL,CAAalH,IAAI,CAACkB,EAAlB,EAAuBmD,QAAD,IAAc;QAClCd,aAAa,CAACP,KAAd;;QACA,IAAIqB,QAAJ,EAAc;UACZ;UACAlB,MAAM,CAACH,KAAP;QACD,CAHD,MAGO;UACL;UACA;UACAO,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkBZ,QAAlB,CAAhB;QACD;MACF,CAVD;MAYA,KAAK2D,UAAL,CAAgBnH,IAAI,CAACkB,EAArB,EAAyB,MAAM;QAC7BqC,aAAa,CAACP,KAAd;QACAG,MAAM,CAACH,KAAP;MACD,CAHD;MAKA,KAAKoE,WAAL,CAAiBpH,IAAI,CAACkB,EAAtB,EAA0B,iBAAqB;QAAA,IAApB;UAAEmG;QAAF,CAAoB,sBAAP,EAAO;;QAC7C,IAAIA,MAAM,KAAK,MAAf,EAAuB;UACrB9D,aAAa,CAACP,KAAd;;UACA,KAAI,CAACF,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC,EAAsC;YAAE8B,KAAK,EAAE,CAAC,CAACG,MAAM,CAACzC;UAAlB,CAAtC;QACD;;QACD2C,OAAO,CAAE,UAASrD,IAAI,CAACkB,EAAG,eAAnB,CAAP;MACD,CAND;MAQA,KAAKoG,WAAL,CAAiBtH,IAAI,CAACkB,EAAtB,EAA0B,MAAM;QAC9BqC,aAAa,CAACP,KAAd;;QACA,IAAIhD,IAAI,CAACuH,KAAT,EAAgB;UACdpE,MAAM,CAACH,KAAP;QACD;;QACDO,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkBZ,QAAlB,CAAhB;MACD,CAND;IAOD,CAjPM,EAiPJgE,KAjPI,CAiPGjD,GAAD,IAAS;MAChB,KAAKzE,IAAL,CAAU2D,IAAV,CAAe,cAAf,EAA+BzD,IAA/B,EAAqCuE,GAArC;MACA,MAAMA,GAAN;IACD,CApPM,CAAP;EAqPD;;EAwBD;AACF;AACA;AACA;EACoB,MAAZkD,YAAY,CAAEzH,IAAF,EAAQ;IACxB,KAAK8C,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC,EADwB,CAGxB;;IACA,IAAI,CAAClB,IAAI,CAAC0H,QAAL,CAAcC,aAAf,IAAgC,CAAC3H,IAAI,CAAC4H,UAA1C,EAAsD;MACpD,KAAK9H,IAAL,CAAU2D,IAAV,CAAe,gBAAf,EAAiCzD,IAAjC;IACD;;IAED,IAAI;MACF,IAAIA,IAAI,CAAC6H,WAAT,EAAsB;QACpB,OAAO,KAAKC,qBAAL,CAA2B9H,IAA3B,CAAP;MACD;;MACD,MAAM6H,WAAW,GAAG,kCAAM,IAAN,sDAAoC7H,IAApC,CAApB;MAEA,IAAI,CAAC,KAAKF,IAAL,CAAU0C,QAAV,GAAqBD,KAArB,CAA2BvC,IAAI,CAACkB,EAAhC,CAAL,EAA0C,OAAOO,SAAP;MAE1C,KAAK3B,IAAL,CAAUiI,YAAV,CAAuB/H,IAAI,CAACkB,EAA5B,EAAgC;QAAE2G;MAAF,CAAhC;MACA,OAAO,KAAKC,qBAAL,CAA2B,KAAKhI,IAAL,CAAUkI,OAAV,CAAkBhI,IAAI,CAACkB,EAAvB,CAA3B,CAAP;IACD,CAVD,CAUE,OAAOqD,GAAP,EAAY;MACZ,KAAKzE,IAAL,CAAU2D,IAAV,CAAe,cAAf,EAA+BzD,IAA/B,EAAqCuE,GAArC;MACA,MAAMA,GAAN;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEuD,qBAAqB,CAAE9H,IAAF,EAAQ;IAAA;;IAC3B,OAAO,IAAIoD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtC,MAAMtC,KAAK,GAAGhB,IAAI,CAAC6H,WAAnB;MACA,MAAMI,IAAI,GAAGjK,aAAa,CAACgC,IAAI,CAACE,MAAL,CAAYgI,YAAb,CAA1B;MACA,MAAMC,MAAM,GAAG,IAAIrK,MAAJ,CAAW;QAAEsK,MAAM,EAAG,GAAEH,IAAK,QAAOjH,KAAM;MAA/B,CAAX,CAAf;MACA,KAAKiB,eAAL,CAAqBjC,IAAI,CAACkB,EAA1B,IAAgCiH,MAAhC;MACA,KAAKnG,cAAL,CAAoBhC,IAAI,CAACkB,EAAzB,IAA+B,IAAIhD,YAAJ,CAAiB,KAAK4B,IAAtB,CAA/B;MAEA,IAAIyD,aAAJ;MAEA,KAAKyD,YAAL,CAAkBhH,IAAI,CAACkB,EAAvB,EAA2B,MAAM;QAC/BqC,aAAa,CAACP,KAAd;QACAmF,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,EAAtB;QACA,KAAKvF,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC;QACAmC,OAAO,CAAE,UAASrD,IAAI,CAACkB,EAAG,cAAnB,CAAP;MACD,CALD;MAOA,KAAKgG,OAAL,CAAalH,IAAI,CAACkB,EAAlB,EAAuBmD,QAAD,IAAc;QAClC,IAAIA,QAAJ,EAAc;UACZ;UACAd,aAAa,CAACP,KAAd;UACAmF,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB,EAArB;QACD,CAJD,MAIO;UACL;UACA;UACA9E,aAAa,CAACP,KAAd;UACAO,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkB,MAAM;YACtC+D,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,EAAtB;YACA,OAAO,MAAM,CAAE,CAAf;UACD,CAHe,CAAhB;QAID;MACF,CAdD;MAgBA,KAAKlB,UAAL,CAAgBnH,IAAI,CAACkB,EAArB,EAAyB,MAAM;QAC7BqC,aAAa,CAACP,KAAd;QACAmF,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB,EAArB;MACD,CAHD;MAKA,KAAKjB,WAAL,CAAiBpH,IAAI,CAACkB,EAAtB,EAA0B,kBAAqB;QAAA,IAApB;UAAEmG;QAAF,CAAoB,uBAAP,EAAO;;QAC7C,IAAIA,MAAM,KAAK,MAAf,EAAuB;UACrB9D,aAAa,CAACP,KAAd;UACAmF,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,EAAtB;;UACA,MAAI,CAACvF,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC;QACD;;QACDmC,OAAO,CAAE,UAASrD,IAAI,CAACkB,EAAG,eAAnB,CAAP;MACD,CAPD;MASA,KAAKoG,WAAL,CAAiBtH,IAAI,CAACkB,EAAtB,EAA0B,MAAM;QAC9BqC,aAAa,CAACP,KAAd;;QACA,IAAIhD,IAAI,CAACuH,KAAT,EAAgB;UACdY,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB,EAArB;QACD;;QACD9E,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkB,MAAM;UACtC+D,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,EAAtB;UACA,OAAO,MAAM,CAAE,CAAf;QACD,CAHe,CAAhB;MAID,CATD;MAWA,KAAKC,OAAL,CAAatI,IAAI,CAACkB,EAAlB,EAAsB,MAAM;QAC1B;QACA;QACA;QACA;QACA,IAAIiH,MAAM,CAACI,MAAX,EAAmB;UACjBJ,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB,EAArB;UACAF,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,EAAtB;QACD;MACF,CATD;MAWA,KAAKG,UAAL,CAAgBxI,IAAI,CAACkB,EAArB,EAAyB,MAAM;QAC7B;QACA,IAAIiH,MAAM,CAACI,MAAX,EAAmB;UACjBJ,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB,EAArB;UACAF,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,EAAtB;QACD;MACF,CAND;MAQAF,MAAM,CAACM,EAAP,CAAU,UAAV,EAAuBC,YAAD,IAAkB3K,kBAAkB,CAAC,IAAD,EAAO2K,YAAP,EAAqB1I,IAArB,CAA1D;MAEAmI,MAAM,CAACM,EAAP,CAAU,OAAV,EAAoBE,OAAD,IAAa;QAC9B,MAAM;UAAEC;QAAF,IAAcD,OAAO,CAACpB,KAA5B;QACA,MAAMA,KAAK,GAAGjH,MAAM,CAACC,MAAP,CAAc,IAAImB,KAAJ,CAAUkH,OAAV,CAAd,EAAkC;UAAEC,KAAK,EAAEF,OAAO,CAACpB;QAAjB,CAAlC,CAAd,CAF8B,CAI9B;QACA;;QACA,IAAI,CAAC,KAAKxH,IAAL,CAAUsB,kBAAf,EAAmC;UACjC,KAAKyB,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC,EADiC,CAEjC;;UACA,KAAKpB,IAAL,CAAUiI,YAAV,CAAuB/H,IAAI,CAACkB,EAA5B,EAAgC;YAC9B2G,WAAW,EAAE;UADiB,CAAhC;QAGD,CAND,MAMO;UACLM,MAAM,CAACjF,KAAP;QACD;;QAED,KAAKpD,IAAL,CAAU2D,IAAV,CAAe,cAAf,EAA+BzD,IAA/B,EAAqCuH,KAArC;QACAhE,aAAa,CAACW,IAAd;QACAZ,MAAM,CAACiE,KAAD,CAAN;MACD,CAnBD;MAqBAY,MAAM,CAACM,EAAP,CAAU,SAAV,EAAsB3H,IAAD,IAAU;QAC7B,MAAM+D,UAAU,GAAG;UACjBC,SAAS,EAAEhE,IAAI,CAACJ;QADC,CAAnB;QAIA,KAAKZ,IAAL,CAAU2D,IAAV,CAAe,gBAAf,EAAiCzD,IAAjC,EAAuC6E,UAAvC;QACA,KAAK/B,uBAAL,CAA6B9C,IAAI,CAACkB,EAAlC;QACAqC,aAAa,CAACW,IAAd;QAEAb,OAAO;MACR,CAVD;MAYAE,aAAa,GAAG,KAAK5B,QAAL,CAAcyC,GAAd,CAAkB,MAAM;QACtC,IAAIpE,IAAI,CAACqE,QAAT,EAAmB;UACjB8D,MAAM,CAACE,IAAP,CAAY,OAAZ,EAAqB,EAArB;QACD,CAHqC,CAKtC;QACA;QACA;QACA;QACA;QACA;;;QACA,OAAO,MAAM,CAAE,CAAf;MACD,CAZe,CAAhB;IAaD,CA5HM,CAAP;EA6HD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEzD,kBAAkB,CAAE5E,IAAF,EAAQ8E,SAAR,EAAmB;IACnC,MAAMgE,WAAW,GAAG,KAAKhJ,IAAL,CAAUkI,OAAV,CAAkBhI,IAAI,CAACkB,EAAvB,CAApB;IACA,IAAI,CAAC4H,WAAL,EAAkB,OAFiB,CAGnC;;IACA,IAAI,CAACA,WAAW,CAACnL,GAAb,IAAoBmL,WAAW,CAACnL,GAAZ,CAAgBgB,SAAhB,KAA8BmG,SAAtD,EAAiE;MAC/D,KAAKhF,IAAL,CAAU0E,GAAV,CAAc,0BAAd;MACA,KAAK1E,IAAL,CAAUiI,YAAV,CAAuBe,WAAW,CAAC5H,EAAnC,EAAuC;QACrCvD,GAAG,EAAE,EAAE,GAAGmL,WAAW,CAACnL,GAAjB;UAAsBgB,SAAS,EAAEmG;QAAjC;MADgC,CAAvC;IAGD;EACF;EAED;AACF;AACA;AACA;;;EACEkC,YAAY,CAAErE,MAAF,EAAUoG,EAAV,EAAc;IACxB,KAAK/G,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,cAA/B,EAAgDzI,IAAD,IAAU;MACvD,IAAI2C,MAAM,KAAK3C,IAAI,CAACkB,EAApB,EAAwB6H,EAAE,CAAC/I,IAAI,CAACkB,EAAN,CAAF;IACzB,CAFD;EAGD;EAED;AACF;AACA;AACA;;;EACEgG,OAAO,CAAEvE,MAAF,EAAUoG,EAAV,EAAc;IACnB,KAAK/G,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,cAA/B,EAA+C,CAACxB,YAAD,EAAe5C,QAAf,KAA4B;MACzE,IAAI1B,MAAM,KAAKsE,YAAf,EAA6B;QAC3B;QACA8B,EAAE,CAAC1E,QAAD,CAAF;MACD;IACF,CALD;EAMD;EAED;AACF;AACA;AACA;;;EACEiE,OAAO,CAAE3F,MAAF,EAAUoG,EAAV,EAAc;IACnB,KAAK/G,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,cAA/B,EAAgDxB,YAAD,IAAkB;MAC/D,IAAItE,MAAM,KAAKsE,YAAf,EAA6B;QAC3B8B,EAAE;MACH;IACF,CAJD;EAKD;EAED;AACF;AACA;AACA;;;EACEP,UAAU,CAAE7F,MAAF,EAAUoG,EAAV,EAAc;IACtB,KAAK/G,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,WAA/B,EAA4C,MAAM;MAChD,IAAI,CAAC,KAAK3I,IAAL,CAAUkI,OAAV,CAAkBrF,MAAlB,CAAL,EAAgC;MAChCoG,EAAE;IACH,CAHD;EAID;EAED;AACF;AACA;AACA;;;EACE5B,UAAU,CAAExE,MAAF,EAAUoG,EAAV,EAAc;IACtB,KAAK/G,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,WAA/B,EAA4C,MAAM;MAChD,IAAI,CAAC,KAAK3I,IAAL,CAAUkI,OAAV,CAAkBrF,MAAlB,CAAL,EAAgC;MAChCoG,EAAE;IACH,CAHD;EAID;EAED;AACF;AACA;AACA;;;EACE3B,WAAW,CAAEzE,MAAF,EAAUqG,YAAV,EAAwB;IAAA;;IACjC,KAAKhH,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,YAA/B,EAA6C,YAAa;MACxD,IAAI,CAAC,MAAI,CAAC3I,IAAL,CAAUkI,OAAV,CAAkBrF,MAAlB,CAAL,EAAgC;MAChCqG,YAAY,CAAC,YAAD,CAAZ;IACD,CAHD;EAID;EAED;AACF;AACA;AACA;;;EACE1B,WAAW,CAAE3E,MAAF,EAAUoG,EAAV,EAAc;IACvB,KAAK/G,cAAL,CAAoBW,MAApB,EAA4B8F,EAA5B,CAA+B,YAA/B,EAA6C,MAAM;MACjD,IAAI,CAAC,KAAK3I,IAAL,CAAUkI,OAAV,CAAkBrF,MAAlB,CAAL,EAAgC;MAChCoG,EAAE;IACH,CAHD;EAID;EAED;AACF;AACA;;;EACEE,WAAW,CAAE1G,KAAF,EAAS;IAClB,MAAM2G,QAAQ,GAAG3G,KAAK,CAAC4G,GAAN,CAAU,CAACnJ,IAAD,EAAOoJ,CAAP,KAAa;MACtC,MAAMC,OAAO,GAAGD,CAAC,GAAG,CAApB;MACA,MAAME,KAAK,GAAG/G,KAAK,CAACgH,MAApB;;MAEA,IAAI,WAAWvJ,IAAX,IAAmBA,IAAI,CAACuH,KAA5B,EAAmC;QACjC,OAAOnE,OAAO,CAACE,MAAR,CAAe,IAAI5B,KAAJ,CAAU1B,IAAI,CAACuH,KAAf,CAAf,CAAP;MACD;;MAAC,IAAIvH,IAAI,CAACwJ,QAAT,EAAmB;QACnB;QACA;QACA;QACA,IAAI,CAACxJ,IAAI,CAAC0H,QAAL,CAAcC,aAAf,IAAgC,CAAC3H,IAAI,CAAC4H,UAA1C,EAAsD;UACpD,KAAK9H,IAAL,CAAU2D,IAAV,CAAe,gBAAf,EAAiCzD,IAAjC;QACD;;QACD,OAAO,KAAKyH,YAAL,CAAkBzH,IAAlB,EAAwBqJ,OAAxB,EAAiCC,KAAjC,CAAP;MACD,CAdqC,CAetC;;;MACA,IAAI,CAACtJ,IAAI,CAAC0H,QAAL,CAAcC,aAAf,IAAgC,CAAC3H,IAAI,CAAC4H,UAA1C,EAAsD;QACpD,KAAK9H,IAAL,CAAU2D,IAAV,CAAe,gBAAf,EAAiCzD,IAAjC;MACD;;MACD,OAAO,KAAKmD,MAAL,CAAYnD,IAAZ,EAAkBqJ,OAAlB,EAA2BC,KAA3B,CAAP;IACD,CApBgB,CAAjB;IAsBA,OAAOrL,MAAM,CAACiL,QAAD,CAAb;EACD;EAED;AACF;AACA;;;EACE9G,YAAY,CAAEqH,OAAF,EAAW;IACrB,IAAIA,OAAO,CAACF,MAAR,KAAmB,CAAvB,EAA0B;MACxB,KAAKzJ,IAAL,CAAU0E,GAAV,CAAc,0BAAd;MACA,OAAOpB,OAAO,CAACC,OAAR,EAAP;IACD;;IAED,IAAI,KAAKtD,IAAL,CAAUuB,KAAV,KAAoB,CAAxB,EAA2B;MACzB,KAAKxB,IAAL,CAAU0E,GAAV,CACE,qOADF,EAEE,SAFF;IAID;;IAED,KAAK1E,IAAL,CAAU0E,GAAV,CAAc,oBAAd;IACA,MAAMkF,aAAa,GAAGD,OAAO,CAACN,GAAR,CAAaxG,MAAD,IAAY,KAAK7C,IAAL,CAAUkI,OAAV,CAAkBrF,MAAlB,CAAxB,CAAtB;IAEA,OAAO,KAAKsG,WAAL,CAAiBS,aAAjB,EACJ/C,IADI,CACC,MAAM,IADP,CAAP;EAED;;EAEDgD,OAAO,GAAI;IACT,KAAK7J,IAAL,CAAU+C,QAAV,CAAmB;MACjB+G,YAAY,EAAE,EAAE,GAAG,KAAK9J,IAAL,CAAU0C,QAAV,GAAqBoH,YAA1B;QAAwCC,gBAAgB,EAAE;MAA1D;IADG,CAAnB;IAGA,KAAK/J,IAAL,CAAUgK,WAAV,CAAsB,KAAK1H,YAA3B;IAEA,KAAKtC,IAAL,CAAU2I,EAAV,CAAa,gBAAb,EAA+B,KAAKvG,mBAApC;EACD;;EAED6H,SAAS,GAAI;IACX,KAAKjK,IAAL,CAAU+C,QAAV,CAAmB;MACjB+G,YAAY,EAAE,EAAE,GAAG,KAAK9J,IAAL,CAAU0C,QAAV,GAAqBoH,YAA1B;QAAwCC,gBAAgB,EAAE;MAA1D;IADG,CAAnB;IAGA,KAAK/J,IAAL,CAAUkK,cAAV,CAAyB,KAAK5H,YAA9B;EACD;;AA5tByC;AAAvBxC,G,CACZqK,O,GAAUzL,WAAW,CAAC0L,O"}