export class UppyAngularWrapper {
    onMount(defaultOptions, plugin) {
        this.options = {
            ...defaultOptions,
            ...this.props,
        };
        this.uppy.use(plugin, this.options);
        this.plugin = this.uppy.getPlugin(this.options.id);
    }
    handleChanges(changes, plugin) {
        // Without the last part of this conditional, it tries to uninstall before the plugin is mounted
        if (changes['uppy'] && this.uppy !== changes['uppy'].previousValue && changes['uppy'].previousValue !== undefined) {
            this.uninstall(changes['uppy'].previousValue);
            this.uppy.use(plugin, this.options);
        }
        this.options = { ...this.options, ...this.props };
        this.plugin = this.uppy.getPlugin(this.options.id);
        if (changes['props'] && this.props !== changes['props'].previousValue && changes['props'].previousValue !== undefined) {
            this.plugin.setOptions({ ...this.options });
        }
    }
    uninstall(uppy = this.uppy) {
        uppy.removePlugin(this.plugin);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3VwcHkvYW5ndWxhci9zcmMvbGliL3V0aWxzL3dyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsTUFBTSxPQUFnQixrQkFBa0I7SUFPcEMsT0FBTyxDQUFDLGNBQXVDLEVBQUUsTUFBb0U7UUFDbkgsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLEdBQUcsY0FBYztZQUNqQixHQUFHLElBQUksQ0FBQyxLQUFLO1NBQ2QsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBZSxDQUFDO0lBQ25FLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBc0IsRUFBRSxNQUFXO1FBQy9DLGdHQUFnRztRQUNoRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDL0csSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDakQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBZSxDQUFDO1FBQ2pFLElBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUNwSCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDNUM7SUFDSCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSTtRQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVwcHksIFVJUGx1Z2luIH0gZnJvbSAnQHVwcHkvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHsgRHJhZ0Ryb3BPcHRpb25zIH0gZnJvbSAnQHVwcHkvZHJhZy1kcm9wJztcbmltcG9ydCB0eXBlIHsgU3RhdHVzQmFyT3B0aW9ucyB9IGZyb20gJ0B1cHB5L3N0YXR1cy1iYXInO1xuaW1wb3J0IHR5cGUgeyBQcm9ncmVzc0Jhck9wdGlvbnMgfSBmcm9tICdAdXBweS9wcm9ncmVzcy1iYXInO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVXBweUFuZ3VsYXJXcmFwcGVyPFBsdWdpblR5cGUgZXh0ZW5kcyBVSVBsdWdpbiAgPSBVSVBsdWdpbj4ge1xuICAgIGFic3RyYWN0IHByb3BzOiBEcmFnRHJvcE9wdGlvbnN8U3RhdHVzQmFyT3B0aW9uc3xQcm9ncmVzc0Jhck9wdGlvbnM7XG4gICAgYWJzdHJhY3QgZWw6IEVsZW1lbnRSZWZcbiAgICBhYnN0cmFjdCB1cHB5OiBVcHB5O1xuICAgIHByaXZhdGUgb3B0aW9uczogYW55O1xuICAgIHBsdWdpbjogUGx1Z2luVHlwZSB8IHVuZGVmaW5lZDtcblxuICAgIG9uTW91bnQoZGVmYXVsdE9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBwbHVnaW46IG5ldyAodXBweTogVXBweSwgb3B0cz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSA9PiBVSVBsdWdpbikge1xuICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMudXBweS51c2UocGx1Z2luLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5wbHVnaW4gPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKHRoaXMub3B0aW9ucy5pZCkgYXMgUGx1Z2luVHlwZTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMsIHBsdWdpbjogYW55KTogdm9pZCB7XG4gICAgICAvLyBXaXRob3V0IHRoZSBsYXN0IHBhcnQgb2YgdGhpcyBjb25kaXRpb25hbCwgaXQgdHJpZXMgdG8gdW5pbnN0YWxsIGJlZm9yZSB0aGUgcGx1Z2luIGlzIG1vdW50ZWRcbiAgICAgIGlmIChjaGFuZ2VzWyd1cHB5J10gJiYgdGhpcy51cHB5ICE9PSBjaGFuZ2VzWyd1cHB5J10ucHJldmlvdXNWYWx1ZSAmJiBjaGFuZ2VzWyd1cHB5J10ucHJldmlvdXNWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy51bmluc3RhbGwoY2hhbmdlc1sndXBweSddLnByZXZpb3VzVmFsdWUpO1xuICAgICAgICAgIHRoaXMudXBweS51c2UocGx1Z2luLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMucHJvcHMgfVxuICAgICAgdGhpcy5wbHVnaW4gPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKHRoaXMub3B0aW9ucy5pZCkgYXMgUGx1Z2luVHlwZTtcbiAgICAgIGlmKGNoYW5nZXNbJ3Byb3BzJ10gJiYgdGhpcy5wcm9wcyAhPT0gY2hhbmdlc1sncHJvcHMnXS5wcmV2aW91c1ZhbHVlICYmIGNoYW5nZXNbJ3Byb3BzJ10ucHJldmlvdXNWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLnNldE9wdGlvbnMoeyAuLi50aGlzLm9wdGlvbnMgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmluc3RhbGwodXBweSA9IHRoaXMudXBweSk6IHZvaWQge1xuICAgICAgICB1cHB5LnJlbW92ZVBsdWdpbih0aGlzLnBsdWdpbiEpO1xuICAgIH1cblxufVxuIl19